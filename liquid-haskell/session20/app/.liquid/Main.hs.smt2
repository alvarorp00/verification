(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun totalityError () Int)
(declare-fun LHExercises.hd () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Types.Word32Rep () Int)
(declare-fun LHExercises.SL () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Types.BoxedRep () Int)
(declare-fun GHC.Float.sinh () Int)
(declare-fun LHExercises.cons () Int)
(declare-fun LHExercises.remove () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Float.atanh () Int)
(declare-fun LHExercises.makeq () Int)
(declare-fun GHC.Float.tan () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun Data.Typeable.Internal.TrTyCon () Int)
(declare-fun GHC.Float.asinh () Int)
(declare-fun isJust () Int)
(declare-fun GHC.Types.Word8Rep () Int)
(declare-fun GHC.Float.pi () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Float.tanh () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Data.Maybe.fromMaybe () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun Data.Typeable.Internal.$36$WSomeTypeRep () Int)
(declare-fun LHExercises.example2Q () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun lit$36$Exercise$32$9.3 () Str)
(declare-fun papp5 () Int)
(declare-fun GHC.Types.Word16Rep () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.Word64Rep () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun fromJust () Int)
(declare-fun lit$36$Main () Str)
(declare-fun lit$36$main () Str)
(declare-fun GHC.Float.sqrt () Int)
(declare-fun Data.Typeable.Internal.TrType () Int)
(declare-fun GHC.Types.IntRep () Int)
(declare-fun GHC.Types.DoubleRep () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Types.Int8Rep () Int)
(declare-fun Data.Maybe.isNothing () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun Data.Typeable.Internal.$36$WTrTyCon () Int)
(declare-fun GHC.Types.WordRep () Int)
(declare-fun papp3 () Int)
(declare-fun Data.Typeable.Internal.$36$WTrApp () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun Main.main () Int)
(declare-fun Data.Typeable.Internal.SomeTypeRep () Int)
(declare-fun GHC.Float.logBase () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun LHExercises.insert () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Float.asin () Int)
(declare-fun Data.Maybe.maybe () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Float.atan () Int)
(declare-fun GHC.Float.$42$$42$ () Int)
(declare-fun Data.Maybe.fromJust () Int)
(declare-fun cast_as () Int)
(declare-fun LHExercises.example0Q () Int)
(declare-fun LHExercises.replicate () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun fix$36$$58$Main.main () Int)
(declare-fun len () Int)
(declare-fun Data.Type.Equality.Refl () Int)
(declare-fun Data.Typeable.Internal.$36$WTrType () Int)
(declare-fun GHC.Types.Int64Rep () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.TopHandler.runMainIO () Int)
(declare-fun Data.Typeable.Internal.TrFun () Int)
(declare-fun GHC.Types.AddrRep () Int)
(declare-fun LHExercises.back () Int)
(declare-fun LHExercises.realSize () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun GHC.Float.acos () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun LHExercises.nil () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_tmp$36$x$35$$35$358 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Types.FloatRep () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Data.Maybe.isJust () Int)
(declare-fun GHC.Float.acosh () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun Data.Type.Equality.$36$WRefl () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Types.VecRep () Int)
(declare-fun fst () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun autolen () Int)
(declare-fun LHExercises.Q () Int)
(declare-fun GHC.Float.cosh () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792842306$35$$35$dcFA () Int)
(declare-fun LHExercises.removeMaybe () Int)
(declare-fun GHC.Types.Int16Rep () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Fingerprint.Type.$36$WFingerprint () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Float.log () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun GHC.Types.SumRep () Int)
(declare-fun LHExercises.rot () Int)
(declare-fun GHC.Float.sin () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792842304$35$$35$dcFy () Int)
(declare-fun head () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun LHExercises.qsize () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun LHExercises.front () Int)
(declare-fun LHExercises.tl () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun LHExercises.size () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Types.TupleRep () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun LHExercises.emp () Int)
(declare-fun GHC.Float.exp () Int)
(declare-fun GHC.Fingerprint.Type.Fingerprint () Int)
(declare-fun LHExercises.elems () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun LHExercises.okReplicate () Int)
(declare-fun System.IO.putStrLn () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun Data.Typeable.Internal.C$58$Typeable () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.Float.cos () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Types.Int32Rep () Int)
(declare-fun Data.Typeable.Internal.TrApp () Int)
(declare-fun apply$35$$35$21 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$24 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$23 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$22 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$20 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun coerce$35$$35$21 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$24 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$23 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$22 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$20 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)



(assert (distinct lit$36$main lit$36$Main lit$36$Exercise$32$9.3))
(assert (distinct GHC.Types.Int32Rep GHC.Types.Int16Rep GHC.Types.FloatRep GHC.Types.AddrRep GHC.Types.Int64Rep GHC.Types.WordRep GHC.Types.Int8Rep GHC.Types.DoubleRep GHC.Types.IntRep GHC.Types.Word64Rep GHC.Types.Word16Rep GHC.Types.Word8Rep GHC.Types.Word32Rep))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(assert (= (strLen lit$36$Exercise$32$9.3) 12))
(assert (= (strLen lit$36$Main) 4))
(assert (= (strLen lit$36$main) 4))
(push 1)
(push 1)
(pop 1)
(pop 1)
