1:1-1:1::Main.$trModule :: "GHC.Types.Module"
7:1-7:5:::Main.main :: "(GHC.Types.IO ())"
8:5-8:28::lq_anf$##7205759403793235065 :: "(GHC.Types.IO ())"
8:14-8:28::lq_anf$##7205759403793235064 :: "[GHC.Types.Char]"
9:5-9:82::lq_anf$##7205759403793235072 :: "(GHC.Types.IO ())"
9:6-9:14::System.IO.putStrLn :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
9:17-9:21::lq_anf$##7205759403793235066 :: "[GHC.Types.Char] -> [GHC.Types.Char]"
9:23-9:82::lq_anf$##7205759403793235071 :: "[GHC.Types.Char]"
9:24-9:43::lq_anf$##7205759403793235068 :: "[GHC.Types.Char]"
9:47-9:81::lq_anf$##7205759403793235070 :: "[GHC.Types.Char]"
9:52-9:81::lq_anf$##7205759403793235069 :: "{v : GHC.Types.Bool | v == isJust okRemove}"
9:60-9:80::LHExercises.okRemove :: "{v : (GHC.Maybe.Maybe (LHExercises.Queue GHC.Num.Integer.Integer)) | v == okRemove}"
10:5-10:90::lq_anf$##7205759403793235080 :: "(GHC.Types.IO ())"
10:6-10:14::System.IO.putStrLn :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
10:17-10:21::lq_anf$##7205759403793235073 :: "[GHC.Types.Char] -> [GHC.Types.Char]"
10:23-10:90::lq_anf$##7205759403793235079 :: "[GHC.Types.Char]"
10:24-10:47::lq_anf$##7205759403793235075 :: "[GHC.Types.Char]"
10:51-10:89::lq_anf$##7205759403793235078 :: "[GHC.Types.Char]"
10:56-10:89::lq_anf$##7205759403793235077 :: "GHC.Types.Bool"
10:67-10:88::_ :: "{VV : forall a .\n      (GHC.Maybe.Maybe (LHExercises.Queue a)) | VV == badRemove}"