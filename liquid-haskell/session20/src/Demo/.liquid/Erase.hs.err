{"o_vars":null,"o_types":[[{"realSpan":true,"spanInfo":{"endCol":1,"endLine":1,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":1}},[["Demo.Erase.$trModule","GHC.Types.Module"]]],[{"realSpan":true,"spanInfo":{"endCol":17,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":16,"startLine":38}},[["v","{v' : (Data.Vector.Vector GHC.Types.Int) | v' == v\n                                           && 0 <= vlen v'}"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":9,"startLine":31}},[["y","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":34,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":32,"startLine":38}},[["lq_anf$##7205759403792803057","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":20,"endLine":16,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":16,"startLine":16}},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"realSpan":true,"spanInfo":{"endCol":11,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":10,"startLine":26}},[["y","{v : GHC.Types.Int | v == y}"]]],[{"realSpan":true,"spanInfo":{"endCol":27,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":26,"startLine":26}},[["x","{v : GHC.Types.Int | v == x}"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":27,"startLine":24}},[["Demo.Erase.Emp","{v : Demo.Erase.List | v == Emp}"]]],[{"realSpan":true,"spanInfo":{"endCol":35,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":34,"startLine":26}},[["y","{v : GHC.Types.Int | v == y}"]]],[{"realSpan":true,"spanInfo":{"endCol":11,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":38}},[["Demo.Erase.vectorTest","(Data.Vector.Vector GHC.Types.Int) -> GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":11,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":5,"startLine":26}},[["lq_anf$##7205759403792803083","{v : GHC.Types.Bool | (v <=> x <= y)\n                      && v == <= x y}"]]],[{"realSpan":true,"spanInfo":{"endCol":65,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":64,"startLine":27}},[["x","{v : GHC.Types.Int | v == x}"]]],[{"realSpan":true,"spanInfo":{"endCol":38,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":36,"startLine":26}},[["ys","{v : Demo.Erase.List | v == ys}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":28,"startLine":32}},[["lq_anf$##7205759403792803081","{v : GHC.Types.Bool | (v <=> y1 < x)\n                      && v == < y1 x}"]]],[{"realSpan":true,"spanInfo":{"endCol":6,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":5,"startLine":26}},[["x","{v : GHC.Types.Int | v == x}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":24}},[["lq_anf$##7205759403792803084","{v : GHC.Types.Bool | (v <=> x <= y)\n                      && v == <= x y}"]]],[{"realSpan":true,"spanInfo":{"endCol":58,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":43,"startLine":32}},[["Demo.Erase.lem_ins","x1:GHC.Types.Int -> x2:{v : GHC.Types.Int | x1 < v} -> x3:{ys : Demo.Erase.List | isSorted (Cons x1 ys)} -> {VV : GHC.Types.Bool | isSorted (Cons x1 (insert x2 x3))}"]]],[{"realSpan":true,"spanInfo":{"endCol":14,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":10,"startLine":18}},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"realSpan":true,"spanInfo":{"endCol":63,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":62,"startLine":27}},[["y","{v : GHC.Types.Int | v == y}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":54,"startLine":27}},[["lq_anf$##7205759403792803087","{v : GHC.Types.Bool | isSorted (Cons y (insert x ys))\n                      && v == lem_ins y x ys}"]]],[{"realSpan":true,"spanInfo":{"endCol":7,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":24}},[["Demo.Erase.insert","GHC.Types.Int -> {v : Demo.Erase.List | isSorted v} -> {v : Demo.Erase.List | isSorted v}"]]],[{"realSpan":true,"spanInfo":{"endCol":34,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":38}},[["Data.Vector.!","{VV : forall a .\n      x1:(Data.Vector.Vector a) -> {v : GHC.Types.Int | v >= 0\n                                                        && v < vlen x1} -> a | VV == !}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":16}},[["lq_anf$##7205759403792803089","Demo.Erase.List"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":36,"startLine":32}},[["x","{v : GHC.Types.Int | v == x\n                     && y < v}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":39,"startLine":17}},[["lq_anf$##7205759403792803092","GHC.Types.Bool"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":66,"startLine":27}},[["ys","{v : Demo.Erase.List | v == ys}"]]],[{"realSpan":true,"spanInfo":{"endCol":26,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":25,"startLine":24}},[["x","{v : GHC.Types.Int | v == x}"]]],[{"realSpan":true,"spanInfo":{"endCol":53,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":51,"startLine":32}},[["y1","{v : GHC.Types.Int | v == y1}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":24,"startLine":17}},[["GHC.Classes.&&","x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | v <=> x1\n                                                                      && x2}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":23,"startLine":19}},[["x1","{v : GHC.Types.Int | v == x1}"]]],[{"realSpan":true,"spanInfo":{"endCol":19,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":18,"startLine":19}},[["x","{v : GHC.Types.Int | v == x}"]]],[{"realSpan":true,"spanInfo":{"endCol":41,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":21,"startLine":27}},[["lq_anf$##7205759403792803086","{v : Demo.Erase.List | Cons##lqdc##$select v == y}"]]],[{"realSpan":true,"spanInfo":{"endCol":35,"endLine":17,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":33,"startLine":17}},[["xs","{v : Demo.Erase.List | v == xs}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":64,"startLine":32}},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":31,"startLine":32}},[["lq_anf$##7205759403792803080","{v : GHC.Types.Bool | (v <=> y1 < x)\n                      && v == < y1 x}"]]],[{"realSpan":true,"spanInfo":{"endCol":58,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":56,"startLine":32}},[["ys","{v : Demo.Erase.List | v == ys}"]]],[{"realSpan":true,"spanInfo":{"endCol":35,"endLine":17,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":24,"startLine":17}},[["lq_anf$##7205759403792803090","{v : GHC.Types.Bool | v == isSorted xs}"]]],[{"realSpan":true,"spanInfo":{"endCol":40,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":38,"startLine":27}},[["ys","{v : Demo.Erase.List | v == ys}"]]],[{"realSpan":true,"spanInfo":{"endCol":55,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":54,"startLine":32}},[["x","{v : GHC.Types.Int | v == x\n                     && y < v}"]]],[{"realSpan":true,"spanInfo":{"endCol":33,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":31,"startLine":32}},[["y1","{v : GHC.Types.Int | v == y1}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":31}},[["lq_anf$##7205759403792803079","{v : Demo.Erase.List | isSorted (Cons y v)}"]]],[{"realSpan":true,"spanInfo":{"endCol":13,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":12,"startLine":38}},[["v","(Data.Vector.Vector GHC.Types.Int)"]]],[{"realSpan":true,"spanInfo":{"endCol":41,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":28,"startLine":27}},[["lq_anf$##7205759403792803085","{v : Demo.Erase.List | isSorted v\n                       && v == insert x v\n                       && v == insert x ys}"]]],[{"realSpan":true,"spanInfo":{"endCol":39,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":21,"startLine":26}},[["Demo.Erase.Cons","x1:GHC.Types.Int -> x2:Demo.Erase.List -> {v : Demo.Erase.List | v == Cons x1 x2\n                                                                 && Cons##lqdc##$select v == x1\n                                                                 && Cons##lqdc##$select v == x2}"]]],[{"realSpan":true,"spanInfo":{"endCol":27,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":26,"startLine":27}},[["y","{v : GHC.Types.Int | v == y}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":18,"startLine":19}},[["GHC.Classes.$fOrdInt","{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"]]],[{"realSpan":true,"spanInfo":{"endCol":8,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":31}},[["Demo.Erase.lem_ins","x1:GHC.Types.Int -> x2:{v : GHC.Types.Int | x1 < v} -> x3:{ys : Demo.Erase.List | isSorted (Cons x1 ys)} -> {VV : GHC.Types.Bool | isSorted (Cons x1 (insert x2 x3))}"]]],[{"realSpan":true,"spanInfo":{"endCol":46,"endLine":17,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":44,"startLine":17}},[[null,"{v : Demo.Erase.List | v == xs}"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":20,"startLine":24}},[["Demo.Erase.Cons","x1:GHC.Types.Int -> x2:Demo.Erase.List -> {v : Demo.Erase.List | v == Cons x1 x2\n                                                                 && Cons##lqdc##$select v == x1\n                                                                 && Cons##lqdc##$select v == x2}"]]],[{"realSpan":true,"spanInfo":{"endCol":12,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":11,"startLine":31}},[["x","{v : GHC.Types.Int | y < v}"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":36,"startLine":27}},[["x","{v : GHC.Types.Int | v == x}"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":16,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":16}},[["Demo.Erase.isSorted","x1:Demo.Erase.List -> {VV : GHC.Types.Bool | VV == isSorted x1}"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":8,"startLine":24}},[["x","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":39,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":28,"startLine":26}},[["lq_anf$##7205759403792803088","{v : Demo.Erase.List | v == Cons y ys\n                       && Cons##lqdc##$select v == y\n                       && Cons##lqdc##$select v == ys}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":19,"startLine":31}},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":21,"startLine":27}},[["Language.Haskell.Liquid.ProofCombinators.withProof","{VV : forall a b .\n      x1:a -> b -> {VV : a | VV == x1} | VV == withProof}"]]]],"o_templs":[[{"realSpan":true,"spanInfo":{"endCol":1,"endLine":1,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":1}},[["Demo.Erase.$trModule","{VV##561 : GHC.Types.Module | $k_##562}"]]],[{"realSpan":true,"spanInfo":{"endCol":17,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":16,"startLine":38}},[["v","{lq_tmp$x##558 : (Data.Vector.Vector GHC.Types.Int) | lq_tmp$x##558 == v##a1pw\n                                                      && 0 <= vlen lq_tmp$x##558}"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":9,"startLine":31}},[["y","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":34,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":32,"startLine":38}},[["lq_anf$##7205759403792803057","{lq_tmp$x##541 : GHC.Types.Int | lq_tmp$x##541 == GHC.Types.I# lq_anf$##7205759403792803056##d2sw\n                                 && lq_tmp$x##541 == (lq_anf$##7205759403792803056##d2sw : int)}"]]],[{"realSpan":true,"spanInfo":{"endCol":20,"endLine":16,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":16,"startLine":16}},[["GHC.Types.True","{lq_tmp$x##1032 : GHC.Types.Bool | lq_tmp$x##1032\n                                   && lq_tmp$x##1032 == GHC.Types.True}"]]],[{"realSpan":true,"spanInfo":{"endCol":11,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":10,"startLine":26}},[["y","{lq_tmp$x##938 : GHC.Types.Int | lq_tmp$x##938 == y##a1po}"]]],[{"realSpan":true,"spanInfo":{"endCol":27,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":26,"startLine":26}},[["x","{lq_tmp$x##1018 : GHC.Types.Int | lq_tmp$x##1018 == x##a1pm}"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":27,"startLine":24}},[["Demo.Erase.Emp","{lq_tmp$x##903 : Demo.Erase.List | is$Demo.Erase.Emp lq_tmp$x##903\n                                   && not (is$Demo.Erase.Cons lq_tmp$x##903)\n                                   && lq_tmp$x##903 == Demo.Erase.Emp}"]]],[{"realSpan":true,"spanInfo":{"endCol":35,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":34,"startLine":26}},[["y","{lq_tmp$x##1008 : GHC.Types.Int | lq_tmp$x##1008 == y##a1po}"]]],[{"realSpan":true,"spanInfo":{"endCol":11,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":38}},[["Demo.Erase.vectorTest","lq_tmp$x##536:(Data.Vector.Vector GHC.Types.Int) -> GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":11,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":5,"startLine":26}},[["lq_anf$##7205759403792803083","{lq_tmp$x##925 : GHC.Types.Bool | (lq_tmp$x##925 <=> x##a1pm <= y##a1po)\n                                  && lq_tmp$x##925 == GHC.Classes.<= x##a1pm y##a1po}"]]],[{"realSpan":true,"spanInfo":{"endCol":65,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":64,"startLine":27}},[["x","{lq_tmp$x##978 : GHC.Types.Int | lq_tmp$x##978 == x##a1pm}"]]],[{"realSpan":true,"spanInfo":{"endCol":38,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":36,"startLine":26}},[["ys","{lq_tmp$x##1009 : Demo.Erase.List | lq_tmp$x##1009 == ys##a1pp}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":28,"startLine":32}},[["lq_anf$##7205759403792803081","{lq_tmp$x##854 : GHC.Types.Bool | (lq_tmp$x##854 <=> y1##a1pu < x##a1pr)\n                                  && lq_tmp$x##854 == lq_anf$##7205759403792803080##d2sU\n                                  && lq_tmp$x##854 == GHC.Classes.< y1##a1pu x##a1pr}"]]],[{"realSpan":true,"spanInfo":{"endCol":6,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":5,"startLine":26}},[["x","{lq_tmp$x##937 : GHC.Types.Int | lq_tmp$x##937 == x##a1pm}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":24}},[["lq_anf$##7205759403792803084","{lq_tmp$x##940 : GHC.Types.Bool | (lq_tmp$x##940 <=> x##a1pm <= y##a1po)\n                                  && lq_tmp$x##940 == lq_anf$##7205759403792803083##d2sX\n                                  && lq_tmp$x##940 == GHC.Classes.<= x##a1pm y##a1po}"]]],[{"realSpan":true,"spanInfo":{"endCol":58,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":43,"startLine":32}},[["Demo.Erase.lem_ins","lq_tmp$x##803:GHC.Types.Int -> lq_tmp$x##804:{x : GHC.Types.Int | lq_tmp$x##803 < x} -> lq_tmp$x##805:{ys : Demo.Erase.List | Demo.Erase.isSorted (Demo.Erase.Cons lq_tmp$x##803 ys)} -> {VV : GHC.Types.Bool | Demo.Erase.isSorted (Demo.Erase.Cons lq_tmp$x##803 (Demo.Erase.insert lq_tmp$x##804 lq_tmp$x##805))}"]]],[{"realSpan":true,"spanInfo":{"endCol":14,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":10,"startLine":18}},[["GHC.Types.True","{lq_tmp$x##1065 : GHC.Types.Bool | lq_tmp$x##1065\n                                   && lq_tmp$x##1065 == GHC.Types.True}"]]],[{"realSpan":true,"spanInfo":{"endCol":63,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":62,"startLine":27}},[["y","{lq_tmp$x##977 : GHC.Types.Int | lq_tmp$x##977 == y##a1po}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":54,"startLine":27}},[["lq_anf$##7205759403792803087","{lq_tmp$x##970 : GHC.Types.Bool | Demo.Erase.isSorted (Demo.Erase.Cons y##a1po (Demo.Erase.insert x##a1pm ys##a1pp))\n                                  && lq_tmp$x##970 == Demo.Erase.lem_ins y##a1po x##a1pm ys##a1pp}"]]],[{"realSpan":true,"spanInfo":{"endCol":7,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":24}},[["Demo.Erase.insert","lq_tmp$x##883:GHC.Types.Int -> lq_tmp$x##884:{xs : Demo.Erase.List | Demo.Erase.isSorted xs} -> {xs : Demo.Erase.List | Demo.Erase.isSorted xs}"]]],[{"realSpan":true,"spanInfo":{"endCol":34,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":38}},[["Data.Vector.!","{VV : forall a .\n      lq_tmp$x##552:(Data.Vector.Vector a) -> lq_tmp$x##553:{lq_tmp$x##548 : GHC.Types.Int | lq_tmp$x##548 >= 0\n                                                                                             && lq_tmp$x##548 < vlen lq_tmp$x##552} -> a | VV == Data.Vector.!}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":16}},[["lq_anf$##7205759403792803089","{lq_tmp$x##1025 : Demo.Erase.List | lq_tmp$x##1025 == ds_d2s1}"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":36,"startLine":32}},[["x","{lq_tmp$x##852 : GHC.Types.Int | lq_tmp$x##852 == x##a1pr\n                                 && y##a1pq < lq_tmp$x##852}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":39,"startLine":17}},[["lq_anf$##7205759403792803092","{VV##1056 : GHC.Types.Bool | $k_##1057}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":66,"startLine":27}},[["ys","{lq_tmp$x##979 : Demo.Erase.List | lq_tmp$x##979 == ys##a1pp}"]]],[{"realSpan":true,"spanInfo":{"endCol":26,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":25,"startLine":24}},[["x","{lq_tmp$x##902 : GHC.Types.Int | lq_tmp$x##902 == x##a1pm}"]]],[{"realSpan":true,"spanInfo":{"endCol":53,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":51,"startLine":32}},[["y1","{lq_tmp$x##877 : GHC.Types.Int | lq_tmp$x##877 == y1##a1pu}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":24,"startLine":17}},[["GHC.Classes.&&","lq_tmp$x##1107:GHC.Types.Bool -> lq_tmp$x##1108:GHC.Types.Bool -> {lq_tmp$x##1104 : GHC.Types.Bool | lq_tmp$x##1104 <=> lq_tmp$x##1107\n                                                                                                                        && lq_tmp$x##1108}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":23,"startLine":19}},[["x1","{lq_tmp$x##1100 : GHC.Types.Int | lq_tmp$x##1100 == x1##a1pk}"]]],[{"realSpan":true,"spanInfo":{"endCol":19,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":18,"startLine":19}},[["x","{lq_tmp$x##1099 : GHC.Types.Int | lq_tmp$x##1099 == x##a1pi}"]]],[{"realSpan":true,"spanInfo":{"endCol":41,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":21,"startLine":27}},[["lq_anf$##7205759403792803086","{lq_tmp$x##959 : Demo.Erase.List | is$Demo.Erase.Cons lq_tmp$x##959\n                                   && not (is$Demo.Erase.Emp lq_tmp$x##959)\n                                   && lq_tmp$x##959 == Demo.Erase.Cons y##a1po lq_anf$##7205759403792803085##d2sZ\n                                   && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##959 == y##a1po\n                                   && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##959 == lq_anf$##7205759403792803085##d2sZ}"]]],[{"realSpan":true,"spanInfo":{"endCol":35,"endLine":17,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":33,"startLine":17}},[["xs","{lq_tmp$x##1054 : Demo.Erase.List | lq_tmp$x##1054 == xs##a1pj}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":64,"startLine":32}},[["GHC.Types.True","{lq_tmp$x##861 : GHC.Types.Bool | lq_tmp$x##861\n                                  && lq_tmp$x##861 == GHC.Types.True}"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":31,"startLine":32}},[["lq_anf$##7205759403792803080","{lq_tmp$x##839 : GHC.Types.Bool | (lq_tmp$x##839 <=> y1##a1pu < x##a1pr)\n                                  && lq_tmp$x##839 == GHC.Classes.< y1##a1pu x##a1pr}"]]],[{"realSpan":true,"spanInfo":{"endCol":58,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":56,"startLine":32}},[["ys","{lq_tmp$x##879 : Demo.Erase.List | lq_tmp$x##879 == ys##a1pv}"]]],[{"realSpan":true,"spanInfo":{"endCol":35,"endLine":17,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":24,"startLine":17}},[["lq_anf$##7205759403792803090","{lq_tmp$x##1051 : GHC.Types.Bool | lq_tmp$x##1051 == Demo.Erase.isSorted xs##a1pj\n                                   && lq_tmp$x##1051 == (if is$Demo.Erase.Emp xs##a1pj then true else Demo.Erase.isSorted (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 xs##a1pj)\n                                                                                                      && (if is$Demo.Erase.Emp (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 xs##a1pj) then true else Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 xs##a1pj <= Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 xs##a1pj)))}"]]],[{"realSpan":true,"spanInfo":{"endCol":40,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":38,"startLine":27}},[["ys","{lq_tmp$x##955 : Demo.Erase.List | lq_tmp$x##955 == ys##a1pp}"]]],[{"realSpan":true,"spanInfo":{"endCol":55,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":54,"startLine":32}},[["x","{lq_tmp$x##878 : GHC.Types.Int | lq_tmp$x##878 == x##a1pr\n                                 && y##a1pq < lq_tmp$x##878}"]]],[{"realSpan":true,"spanInfo":{"endCol":33,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":31,"startLine":32}},[["y1","{lq_tmp$x##851 : GHC.Types.Int | lq_tmp$x##851 == y1##a1pu}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":32,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":31}},[["lq_anf$##7205759403792803079","{lq_tmp$x##810 : Demo.Erase.List | Demo.Erase.isSorted (Demo.Erase.Cons y##a1pq lq_tmp$x##810)\n                                   && lq_tmp$x##810 == ds_d2rH}"]]],[{"realSpan":true,"spanInfo":{"endCol":13,"endLine":38,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":12,"startLine":38}},[["v","(Data.Vector.Vector GHC.Types.Int)"]]],[{"realSpan":true,"spanInfo":{"endCol":41,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":28,"startLine":27}},[["lq_anf$##7205759403792803085","{lq_tmp$x##949 : Demo.Erase.List | Demo.Erase.isSorted lq_tmp$x##949\n                                   && lq_tmp$x##949 == Demo.Erase.insert x##a1pm lq_tmp$x##949\n                                   && lq_tmp$x##949 == Demo.Erase.insert x##a1pm ys##a1pp\n                                   && lq_tmp$x##949 == (if is$Demo.Erase.Emp lq_tmp$x##949 then Demo.Erase.Cons x##a1pm Demo.Erase.Emp else (if x##a1pm <= Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##949 then Demo.Erase.Cons x##a1pm (Demo.Erase.Cons (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##949) (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##949)) else Demo.Erase.Cons (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##949) (Demo.Erase.insert x##a1pm (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##949))))}"]]],[{"realSpan":true,"spanInfo":{"endCol":39,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":21,"startLine":26}},[["Demo.Erase.Cons","lq_tmp$x##1016:GHC.Types.Int -> lq_tmp$x##1017:Demo.Erase.List -> {lq_tmp$x##1013 : Demo.Erase.List | is$Demo.Erase.Cons lq_tmp$x##1013\n                                                                                                      && not (is$Demo.Erase.Emp lq_tmp$x##1013)\n                                                                                                      && lq_tmp$x##1013 == Demo.Erase.Cons lq_tmp$x##1016 lq_tmp$x##1017\n                                                                                                      && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##1013 == lq_tmp$x##1016\n                                                                                                      && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##1013 == lq_tmp$x##1017}"]]],[{"realSpan":true,"spanInfo":{"endCol":27,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":26,"startLine":27}},[["y","{lq_tmp$x##964 : GHC.Types.Int | lq_tmp$x##964 == y##a1po}"]]],[{"realSpan":true,"spanInfo":{"endCol":25,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":18,"startLine":19}},[["GHC.Classes.$fOrdInt","{lq_tmp$x##1098 : (GHC.Classes.Ord GHC.Types.Int) | lq_tmp$x##1098 == GHC.Classes.$fOrdInt}"]]],[{"realSpan":true,"spanInfo":{"endCol":8,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":31}},[["Demo.Erase.lem_ins","lq_tmp$x##803:GHC.Types.Int -> lq_tmp$x##804:{x : GHC.Types.Int | lq_tmp$x##803 < x} -> lq_tmp$x##805:{ys : Demo.Erase.List | Demo.Erase.isSorted (Demo.Erase.Cons lq_tmp$x##803 ys)} -> {VV : GHC.Types.Bool | Demo.Erase.isSorted (Demo.Erase.Cons lq_tmp$x##803 (Demo.Erase.insert lq_tmp$x##804 lq_tmp$x##805))}"]]],[{"realSpan":true,"spanInfo":{"endCol":46,"endLine":17,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":44,"startLine":17}},[[null,"{lq_tmp$x##1058 : Demo.Erase.List | lq_tmp$x##1058 == xs##a1pj}"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":20,"startLine":24}},[["Demo.Erase.Cons","lq_tmp$x##900:GHC.Types.Int -> lq_tmp$x##901:Demo.Erase.List -> {lq_tmp$x##897 : Demo.Erase.List | is$Demo.Erase.Cons lq_tmp$x##897\n                                                                                                   && not (is$Demo.Erase.Emp lq_tmp$x##897)\n                                                                                                   && lq_tmp$x##897 == Demo.Erase.Cons lq_tmp$x##900 lq_tmp$x##901\n                                                                                                   && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##897 == lq_tmp$x##900\n                                                                                                   && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##897 == lq_tmp$x##901}"]]],[{"realSpan":true,"spanInfo":{"endCol":12,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":11,"startLine":31}},[["x","{x : GHC.Types.Int | y##a1pq < x}"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":36,"startLine":27}},[["x","{lq_tmp$x##954 : GHC.Types.Int | lq_tmp$x##954 == x##a1pm}"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":16,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":1,"startLine":16}},[["Demo.Erase.isSorted","lq_tmp$x##1021:Demo.Erase.List -> {VV : GHC.Types.Bool | VV == Demo.Erase.isSorted lq_tmp$x##1021\n                                                         && VV == (if is$Demo.Erase.Emp lq_tmp$x##1021 then true else Demo.Erase.isSorted (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##1021)\n                                                                                                                      && (if is$Demo.Erase.Emp (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##1021) then true else Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##1021 <= Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 (Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##1021)))}"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":8,"startLine":24}},[["x","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":39,"endLine":26,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":28,"startLine":26}},[["lq_anf$##7205759403792803088","{lq_tmp$x##1003 : Demo.Erase.List | is$Demo.Erase.Cons lq_tmp$x##1003\n                                    && not (is$Demo.Erase.Emp lq_tmp$x##1003)\n                                    && lq_tmp$x##1003 == Demo.Erase.Cons y##a1po ys##a1pp\n                                    && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##1 lq_tmp$x##1003 == y##a1po\n                                    && Demo.Erase.Cons##lqdc##$select##Demo.Erase.Cons##2 lq_tmp$x##1003 == ys##a1pp}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":31,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":19,"startLine":31}},[["GHC.Types.True","{lq_tmp$x##817 : GHC.Types.Bool | lq_tmp$x##817\n                                  && lq_tmp$x##817 == GHC.Types.True}"]]],[{"realSpan":true,"spanInfo":{"endCol":68,"endLine":27,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Erase.hs","startCol":21,"startLine":27}},[["Language.Haskell.Liquid.ProofCombinators.withProof","{VV : forall a##a5FH b##a5FI .\n      lq_tmp$x##986:a##a5FH -> lq_tmp$x##987:b##a5FI -> {lq_tmp$x##983 : a##a5FH | lq_tmp$x##983 == lq_tmp$x##986} | VV == Language.Haskell.Liquid.ProofCombinators.withProof}"]]]],"o_bots":[],"o_result":{"tag":"Safe","contents":{"numCstr":17,"numIter":34,"numBrkt":26,"numChck":26,"numVald":17}}}