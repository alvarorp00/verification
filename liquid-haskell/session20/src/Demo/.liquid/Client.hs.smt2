(declare-datatypes ((GHC.Maybe.Maybe 1)) ((par (T0) (GHC.Maybe.Nothing (GHC.Maybe.Just (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 T0))))))
(declare-datatypes ((Demo.Client.Simple 0)) ((par () (Demo.Client.C Demo.Client.B Demo.Client.A))))
(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun totalityError () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808870$35$$35$d3Yi () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808874$35$$35$d3Ym () Bool)
(declare-fun lq_tmp$36$x$35$$35$562 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808872$35$$35$d3Yk () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT$35$$35$k_$35$$35$455 () (GHC.Maybe.Maybe Bool))
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Float.sinh () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Float.atanh () Int)
(declare-fun Demo.Client.testProof () Int)
(declare-fun GHC.Float.tan () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun lq_karg$36$VV$35$$35$584$35$$35$k_$35$$35$585 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808863$35$$35$d3Yb () Int)
(declare-fun tail () Int)
(declare-fun GHC.Float.asinh () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808869$35$$35$d3Yh () Str)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808867$35$$35$d3Yf () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808865$35$$35$d3Yd () Int)
(declare-fun ds_d3XK () Demo.Client.Simple)
(declare-fun GHC.Float.pi () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lit$36$Simple () Str)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Demo.Lib.rev () Int)
(declare-fun GHC.Float.tanh () Int)
(declare-fun VV$35$$35$F$35$$35$7 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808871$35$$35$d3Yj () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn () Bool)
(declare-fun VV$35$$35$F$35$$35$9 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun Language.Haskell.Liquid.Equational.$42$$42$$42$ () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun papp5 () Int)
(declare-fun snd () Int)
(declare-fun Demo.Client.$36$tc$39$A () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Language.Haskell.Liquid.Equational.$63$ () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU () (GHC.Maybe.Maybe Bool))
(declare-fun Data.Set.Internal.Tip () LSet)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808866$35$$35$d3Ye () Int)
(declare-fun lit$36$main () Str)
(declare-fun GHC.Float.sqrt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808862$35$$35$d3Ya () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$585 () Int)
(declare-fun VV$35$$35$F$35$$35$13 () (GHC.Maybe.Maybe Bool))
(declare-fun lq_karg$36$VV$35$$35$668$35$$35$k_$35$$35$669 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808853$35$$35$d3Y1 () Str)
(declare-fun GHC.Classes.not () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808852$35$$35$d3Y0 () Int)
(declare-fun VV$35$$35$F$35$$35$14 () (GHC.Maybe.Maybe Bool))
(declare-fun Demo.Client.$36$tcSimple () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4 () Int)
(declare-fun lq_karg$36$VV$35$$35$626$35$$35$k_$35$$35$627 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808857$35$$35$d3Y5 () Int)
(declare-fun lq_karg$36$VV$35$$35$550$35$$35$k_$35$$35$551 () Int)
(declare-fun lq_karg$36$VV$35$$35$480$35$$35$k_$35$$35$481 () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun Demo.Lib.incr () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808848$35$$35$d3XW () Int)
(declare-fun papp3 () Int)
(declare-fun Demo.Client.$36$trModule () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$669 () Int)
(declare-fun GHC.Float.logBase () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808868$35$$35$d3Yg () Int)
(declare-fun Demo.Client.$36$tc$39$C () Int)
(declare-fun fix$36$$36$krep_a3XH () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$509 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.Float.asin () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808849$35$$35$d3XX () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$627 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Float.atan () Int)
(declare-fun GHC.Float.$42$$42$ () Int)
(declare-fun Language.Haskell.Liquid.Equational.QED () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun Data.Set.Internal.Bin () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun VV$35$$35$F$35$$35$16 () (GHC.Maybe.Maybe Bool))
(declare-fun lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$481 () Int)
(declare-fun len () Int)
(declare-fun lit$36$$39$B () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792808850$35$$35$d3XY () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS$35$$35$k_$35$$35$455 () (GHC.Maybe.Maybe Bool))
(declare-fun Language.Haskell.Liquid.Equational.eq () Int)
(declare-fun Demo.Client.test () Int)
(declare-fun listElts () Int)
(declare-fun lq_karg$36$VV$35$$35$508$35$$35$k_$35$$35$509 () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_karg$36$VV$35$$35$454$35$$35$k_$35$$35$455 () (GHC.Maybe.Maybe Bool))
(declare-fun GHC.Float.acos () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS () (GHC.Maybe.Maybe Bool))
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808864$35$$35$d3Yc () Str)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Float.acosh () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun VV$35$$35$F$35$$35$10 () Int)
(declare-fun fst () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808854$35$$35$d3Y2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808855$35$$35$d3Y3 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun Data.Set.Internal.$36$WBin () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun Demo.Client.bump () Int)
(declare-fun lq_tmp$36$x$35$$35$576 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808860$35$$35$d3Y8 () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lit$36$$39$A () Str)
(declare-fun GHC.Real.recip () Int)
(declare-fun autolen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808861$35$$35$d3Y9 () Int)
(declare-fun GHC.Float.cosh () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun VV$35$$35$F$35$$35$8 () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Float.log () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun Demo.Client.$36$tc$39$B () Int)
(declare-fun GHC.Float.sin () Int)
(declare-fun Language.Haskell.Liquid.Equational.$61$$61$. () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun charX () Int)
(declare-fun head () Int)
(declare-fun lit$36$Demo.Client () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792808851$35$$35$d3XZ () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun Demo.Lib.elts () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun GHC.Float.exp () Int)
(declare-fun VV$35$$35$F$35$$35$4 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$551 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT () (GHC.Maybe.Maybe Bool))
(declare-fun lit$36$$39$C () Str)
(declare-fun n$35$$35$a3WQ () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun VV$35$$35$F$35$$35$1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808847$35$$35$d3XV () Str)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.Float.cos () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808858$35$$35$d3Y6 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808859$35$$35$d3Y7 () Str)
(declare-fun apply$35$$35$46 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$37 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$43 (Int (_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$52 (Int (_ BitVec 64)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$80 (Int (GHC.Maybe.Maybe Bool)) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$15 (Int Bool) Demo.Client.Simple)
(declare-fun apply$35$$35$50 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$49 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$40 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$41 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$38 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$47 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$74 (Int (GHC.Maybe.Maybe Bool)) Str)
(declare-fun apply$35$$35$69 (Int (GHC.Maybe.Maybe Int)) Demo.Client.Simple)
(declare-fun apply$35$$35$19 (Int Str) Bool)
(declare-fun apply$35$$35$61 (Int Demo.Client.Simple) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$34 (Int LSet) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$66 (Int (GHC.Maybe.Maybe Int)) LSet)
(declare-fun apply$35$$35$77 (Int (GHC.Maybe.Maybe Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$76 (Int (GHC.Maybe.Maybe Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$21 (Int Str) LSet)
(declare-fun apply$35$$35$44 (Int (_ BitVec 32)) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$53 (Int (_ BitVec 64)) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$64 (Int (GHC.Maybe.Maybe Int)) Bool)
(declare-fun apply$35$$35$6 (Int Int) Demo.Client.Simple)
(declare-fun apply$35$$35$3 (Int Int) LSet)
(declare-fun apply$35$$35$27 (Int LSet) Int)
(declare-fun apply$35$$35$70 (Int (GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$54 (Int Demo.Client.Simple) Int)
(declare-fun apply$35$$35$9 (Int Bool) Int)
(declare-fun apply$35$$35$79 (Int (GHC.Maybe.Maybe Bool)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$7 (Int Int) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$26 (Int Str) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$73 (Int (GHC.Maybe.Maybe Bool)) Bool)
(declare-fun apply$35$$35$20 (Int Str) Str)
(declare-fun apply$35$$35$60 (Int Demo.Client.Simple) Demo.Client.Simple)
(declare-fun apply$35$$35$33 (Int LSet) Demo.Client.Simple)
(declare-fun apply$35$$35$67 (Int (GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun apply$35$$35$68 (Int (GHC.Maybe.Maybe Int)) (_ BitVec 64))
(declare-fun apply$35$$35$75 (Int (GHC.Maybe.Maybe Bool)) LSet)
(declare-fun apply$35$$35$22 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$24 (Int Str) Demo.Client.Simple)
(declare-fun apply$35$$35$62 (Int Demo.Client.Simple) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$35 (Int LSet) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$65 (Int (GHC.Maybe.Maybe Int)) Str)
(declare-fun apply$35$$35$31 (Int LSet) (_ BitVec 32))
(declare-fun apply$35$$35$32 (Int LSet) (_ BitVec 64))
(declare-fun apply$35$$35$58 (Int Demo.Client.Simple) (_ BitVec 32))
(declare-fun apply$35$$35$59 (Int Demo.Client.Simple) (_ BitVec 64))
(declare-fun apply$35$$35$29 (Int LSet) Str)
(declare-fun apply$35$$35$71 (Int (GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$56 (Int Demo.Client.Simple) Str)
(declare-fun apply$35$$35$8 (Int Int) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$45 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$36 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$17 (Int Bool) (GHC.Maybe.Maybe Bool))
(declare-fun apply$35$$35$78 (Int (GHC.Maybe.Maybe Bool)) Demo.Client.Simple)
(declare-fun apply$35$$35$25 (Int Str) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$18 (Int Str) Int)
(declare-fun apply$35$$35$30 (Int LSet) LSet)
(declare-fun apply$35$$35$57 (Int Demo.Client.Simple) LSet)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$55 (Int Demo.Client.Simple) Bool)
(declare-fun apply$35$$35$28 (Int LSet) Bool)
(declare-fun apply$35$$35$11 (Int Bool) Str)
(declare-fun apply$35$$35$13 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$16 (Int Bool) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$72 (Int (GHC.Maybe.Maybe Bool)) Int)
(declare-fun apply$35$$35$63 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$10 (Int Bool) Bool)
(declare-fun apply$35$$35$12 (Int Bool) LSet)
(declare-fun apply$35$$35$51 (Int (_ BitVec 64)) Demo.Client.Simple)
(declare-fun apply$35$$35$42 (Int (_ BitVec 32)) Demo.Client.Simple)
(declare-fun apply$35$$35$48 (Int (_ BitVec 64)) LSet)
(declare-fun apply$35$$35$39 (Int (_ BitVec 32)) LSet)
(declare-fun coerce$35$$35$46 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$37 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$43 ((_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$52 ((_ BitVec 64)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$80 ((GHC.Maybe.Maybe Bool)) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$15 (Bool) Demo.Client.Simple)
(declare-fun coerce$35$$35$50 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$49 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$40 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$41 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$38 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$47 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$74 ((GHC.Maybe.Maybe Bool)) Str)
(declare-fun coerce$35$$35$69 ((GHC.Maybe.Maybe Int)) Demo.Client.Simple)
(declare-fun coerce$35$$35$19 (Str) Bool)
(declare-fun coerce$35$$35$61 (Demo.Client.Simple) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$34 (LSet) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$66 ((GHC.Maybe.Maybe Int)) LSet)
(declare-fun coerce$35$$35$77 ((GHC.Maybe.Maybe Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$76 ((GHC.Maybe.Maybe Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$21 (Str) LSet)
(declare-fun coerce$35$$35$44 ((_ BitVec 32)) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$53 ((_ BitVec 64)) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$64 ((GHC.Maybe.Maybe Int)) Bool)
(declare-fun coerce$35$$35$6 (Int) Demo.Client.Simple)
(declare-fun coerce$35$$35$3 (Int) LSet)
(declare-fun coerce$35$$35$27 (LSet) Int)
(declare-fun coerce$35$$35$70 ((GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$54 (Demo.Client.Simple) Int)
(declare-fun coerce$35$$35$9 (Bool) Int)
(declare-fun coerce$35$$35$79 ((GHC.Maybe.Maybe Bool)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$7 (Int) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$26 (Str) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$73 ((GHC.Maybe.Maybe Bool)) Bool)
(declare-fun coerce$35$$35$20 (Str) Str)
(declare-fun coerce$35$$35$60 (Demo.Client.Simple) Demo.Client.Simple)
(declare-fun coerce$35$$35$33 (LSet) Demo.Client.Simple)
(declare-fun coerce$35$$35$67 ((GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$68 ((GHC.Maybe.Maybe Int)) (_ BitVec 64))
(declare-fun coerce$35$$35$75 ((GHC.Maybe.Maybe Bool)) LSet)
(declare-fun coerce$35$$35$22 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$23 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$24 (Str) Demo.Client.Simple)
(declare-fun coerce$35$$35$62 (Demo.Client.Simple) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$35 (LSet) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$65 ((GHC.Maybe.Maybe Int)) Str)
(declare-fun coerce$35$$35$31 (LSet) (_ BitVec 32))
(declare-fun coerce$35$$35$32 (LSet) (_ BitVec 64))
(declare-fun coerce$35$$35$58 (Demo.Client.Simple) (_ BitVec 32))
(declare-fun coerce$35$$35$59 (Demo.Client.Simple) (_ BitVec 64))
(declare-fun coerce$35$$35$29 (LSet) Str)
(declare-fun coerce$35$$35$71 ((GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$56 (Demo.Client.Simple) Str)
(declare-fun coerce$35$$35$8 (Int) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$45 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$36 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$17 (Bool) (GHC.Maybe.Maybe Bool))
(declare-fun coerce$35$$35$78 ((GHC.Maybe.Maybe Bool)) Demo.Client.Simple)
(declare-fun coerce$35$$35$25 (Str) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$18 (Str) Int)
(declare-fun coerce$35$$35$30 (LSet) LSet)
(declare-fun coerce$35$$35$57 (Demo.Client.Simple) LSet)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$55 (Demo.Client.Simple) Bool)
(declare-fun coerce$35$$35$28 (LSet) Bool)
(declare-fun coerce$35$$35$11 (Bool) Str)
(declare-fun coerce$35$$35$13 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$16 (Bool) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$72 ((GHC.Maybe.Maybe Bool)) Int)
(declare-fun coerce$35$$35$63 ((GHC.Maybe.Maybe Int)) Int)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$10 (Bool) Bool)
(declare-fun coerce$35$$35$12 (Bool) LSet)
(declare-fun coerce$35$$35$51 ((_ BitVec 64)) Demo.Client.Simple)
(declare-fun coerce$35$$35$42 ((_ BitVec 32)) Demo.Client.Simple)
(declare-fun coerce$35$$35$48 ((_ BitVec 64)) LSet)
(declare-fun coerce$35$$35$39 ((_ BitVec 32)) LSet)
(declare-fun smt_lambda$35$$35$46 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$37 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$43 ((_ BitVec 32) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$52 ((_ BitVec 64) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$80 ((GHC.Maybe.Maybe Bool) (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$15 (Bool Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$50 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$49 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$40 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$41 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$38 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$47 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$74 ((GHC.Maybe.Maybe Bool) Str) Int)
(declare-fun smt_lambda$35$$35$69 ((GHC.Maybe.Maybe Int) Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$19 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$61 (Demo.Client.Simple (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$34 (LSet (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$66 ((GHC.Maybe.Maybe Int) LSet) Int)
(declare-fun smt_lambda$35$$35$77 ((GHC.Maybe.Maybe Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$76 ((GHC.Maybe.Maybe Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$21 (Str LSet) Int)
(declare-fun smt_lambda$35$$35$44 ((_ BitVec 32) (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$53 ((_ BitVec 64) (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$64 ((GHC.Maybe.Maybe Int) Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Int Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$3 (Int LSet) Int)
(declare-fun smt_lambda$35$$35$27 (LSet Int) Int)
(declare-fun smt_lambda$35$$35$70 ((GHC.Maybe.Maybe Int) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$54 (Demo.Client.Simple Int) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$79 ((GHC.Maybe.Maybe Bool) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$7 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$26 (Str (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$73 ((GHC.Maybe.Maybe Bool) Bool) Int)
(declare-fun smt_lambda$35$$35$20 (Str Str) Int)
(declare-fun smt_lambda$35$$35$60 (Demo.Client.Simple Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$33 (LSet Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$67 ((GHC.Maybe.Maybe Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$68 ((GHC.Maybe.Maybe Int) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$75 ((GHC.Maybe.Maybe Bool) LSet) Int)
(declare-fun smt_lambda$35$$35$22 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$24 (Str Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$62 (Demo.Client.Simple (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$35 (LSet (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$65 ((GHC.Maybe.Maybe Int) Str) Int)
(declare-fun smt_lambda$35$$35$31 (LSet (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$32 (LSet (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$58 (Demo.Client.Simple (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$59 (Demo.Client.Simple (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$29 (LSet Str) Int)
(declare-fun smt_lambda$35$$35$71 ((GHC.Maybe.Maybe Int) (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$56 (Demo.Client.Simple Str) Int)
(declare-fun smt_lambda$35$$35$8 (Int (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$45 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$36 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$17 (Bool (GHC.Maybe.Maybe Bool)) Int)
(declare-fun smt_lambda$35$$35$78 ((GHC.Maybe.Maybe Bool) Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$25 (Str (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$18 (Str Int) Int)
(declare-fun smt_lambda$35$$35$30 (LSet LSet) Int)
(declare-fun smt_lambda$35$$35$57 (Demo.Client.Simple LSet) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$55 (Demo.Client.Simple Bool) Int)
(declare-fun smt_lambda$35$$35$28 (LSet Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$13 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$16 (Bool (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$72 ((GHC.Maybe.Maybe Bool) Int) Int)
(declare-fun smt_lambda$35$$35$63 ((GHC.Maybe.Maybe Int) Int) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$10 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$12 (Bool LSet) Int)
(declare-fun smt_lambda$35$$35$51 ((_ BitVec 64) Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$42 ((_ BitVec 32) Demo.Client.Simple) Int)
(declare-fun smt_lambda$35$$35$48 ((_ BitVec 64) LSet) Int)
(declare-fun smt_lambda$35$$35$39 ((_ BitVec 32) LSet) Int)
(declare-fun lam_arg$35$$35$1$35$$35$27 () LSet)
(declare-fun lam_arg$35$$35$2$35$$35$27 () LSet)
(declare-fun lam_arg$35$$35$3$35$$35$27 () LSet)
(declare-fun lam_arg$35$$35$4$35$$35$27 () LSet)
(declare-fun lam_arg$35$$35$5$35$$35$27 () LSet)
(declare-fun lam_arg$35$$35$6$35$$35$27 () LSet)
(declare-fun lam_arg$35$$35$7$35$$35$27 () LSet)
(declare-fun lam_arg$35$$35$1$35$$35$54 () Demo.Client.Simple)
(declare-fun lam_arg$35$$35$2$35$$35$54 () Demo.Client.Simple)
(declare-fun lam_arg$35$$35$3$35$$35$54 () Demo.Client.Simple)
(declare-fun lam_arg$35$$35$4$35$$35$54 () Demo.Client.Simple)
(declare-fun lam_arg$35$$35$5$35$$35$54 () Demo.Client.Simple)
(declare-fun lam_arg$35$$35$6$35$$35$54 () Demo.Client.Simple)
(declare-fun lam_arg$35$$35$7$35$$35$54 () Demo.Client.Simple)
(declare-fun lam_arg$35$$35$1$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$72 () (GHC.Maybe.Maybe Bool))
(declare-fun lam_arg$35$$35$2$35$$35$72 () (GHC.Maybe.Maybe Bool))
(declare-fun lam_arg$35$$35$3$35$$35$72 () (GHC.Maybe.Maybe Bool))
(declare-fun lam_arg$35$$35$4$35$$35$72 () (GHC.Maybe.Maybe Bool))
(declare-fun lam_arg$35$$35$5$35$$35$72 () (GHC.Maybe.Maybe Bool))
(declare-fun lam_arg$35$$35$6$35$$35$72 () (GHC.Maybe.Maybe Bool))
(declare-fun lam_arg$35$$35$7$35$$35$72 () (GHC.Maybe.Maybe Bool))
(declare-fun lam_arg$35$$35$1$35$$35$63 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$2$35$$35$63 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$3$35$$35$63 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$4$35$$35$63 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$5$35$$35$63 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$6$35$$35$63 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$7$35$$35$63 () (GHC.Maybe.Maybe Int))


(assert (distinct lit$36$$39$C lit$36$Demo.Client lit$36$$39$A lit$36$$39$B lit$36$main lit$36$Simple))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))

(assert (distinct GHC.Types.False GHC.Types.True))
(assert (distinct Demo.Client.C Demo.Client.A Demo.Client.B))
(assert (= (strLen lit$36$Simple) 6))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$$39$B) 2))
(assert (= (strLen lit$36$$39$A) 2))
(assert (= (strLen lit$36$Demo.Client) 11))
(assert (= (strLen lit$36$$39$C) 2))
(push 1)
(define-fun b$36$$35$$35$32 () Bool (= Demo.Client.C Demo.Client.C))
(define-fun b$36$$35$$35$160 () Bool (and (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn (> n$35$$35$a3WQ lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl)) (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn lq_anf$36$$35$$35$7205759403792808874$35$$35$d3Ym) (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn (apply$35$$35$1 (apply$35$$35$0 (as GHC.Classes.$62$ Int) n$35$$35$a3WQ) lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl))))
(define-fun b$36$$35$$35$129 () Bool (= lq_anf$36$$35$$35$7205759403792808851$35$$35$d3XZ 626955827506044525))
(define-fun b$36$$35$$35$34 () Bool (= GHC.Types.False GHC.Types.False))
(define-fun b$36$$35$$35$130 () Bool (= lq_anf$36$$35$$35$7205759403792808852$35$$35$d3Y0 14093714033142512024))
(define-fun b$36$$35$$35$67 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$131 () Bool (= lq_anf$36$$35$$35$7205759403792808853$35$$35$d3Y1 lit$36$Simple))
(define-fun b$36$$35$$35$132 () Bool (= lq_anf$36$$35$$35$7205759403792808854$35$$35$d3Y2 (apply$35$$35$18 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792808853$35$$35$d3Y1)))
(define-fun b$36$$35$$35$164 () Bool (and (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn (> n$35$$35$a3WQ lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl)) (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn lq_anf$36$$35$$35$7205759403792808874$35$$35$d3Ym) (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn (apply$35$$35$1 (apply$35$$35$0 (as GHC.Classes.$62$ Int) n$35$$35$a3WQ) lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl))))
(define-fun b$36$$35$$35$133 () Bool (= lq_anf$36$$35$$35$7205759403792808855$35$$35$d3Y3 0))
(define-fun b$36$$35$$35$165 () Bool (and lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn (> n$35$$35$a3WQ lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl)) (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn lq_anf$36$$35$$35$7205759403792808874$35$$35$d3Ym) (= lq_anf$36$$35$$35$7205759403792808875$35$$35$d3Yn (apply$35$$35$1 (apply$35$$35$0 (as GHC.Classes.$62$ Int) n$35$$35$a3WQ) lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl))))
(define-fun b$36$$35$$35$136 () Bool (and (= smt_set_emp (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4)) (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4)) (= lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4 (as GHC.Types.$91$$93$ Int)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) smt_set_emp) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) 0)))
(define-fun b$36$$35$$35$138 () Bool (= lq_anf$36$$35$$35$7205759403792808857$35$$35$d3Y5 8028590499212989186))
(define-fun b$36$$35$$35$170 () Bool (= VV$35$$35$F$35$$35$1 n$35$$35$a3WQ))
(define-fun b$36$$35$$35$139 () Bool (= lq_anf$36$$35$$35$7205759403792808858$35$$35$d3Y6 2265590748769940637))
(define-fun b$36$$35$$35$171 () Bool (= VV$35$$35$F$35$$35$4 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.TyCon lq_anf$36$$35$$35$7205759403792808867$35$$35$d3Yf) lq_anf$36$$35$$35$7205759403792808868$35$$35$d3Yg) Demo.Client.$36$trModule) lq_anf$36$$35$$35$7205759403792808870$35$$35$d3Yi) lq_anf$36$$35$$35$7205759403792808871$35$$35$d3Yj) fix$36$$36$krep_a3XH)))
(define-fun b$36$$35$$35$108 () Bool (and (is-Demo.Client.A Demo.Client.A) (not (is-Demo.Client.B Demo.Client.A)) (not (is-Demo.Client.C Demo.Client.A)) (= Demo.Client.A Demo.Client.A)))
(define-fun b$36$$35$$35$140 () Bool (= lq_anf$36$$35$$35$7205759403792808859$35$$35$d3Y7 lit$36$$39$A))
(define-fun b$36$$35$$35$172 () Bool (= VV$35$$35$F$35$$35$5 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.TyCon lq_anf$36$$35$$35$7205759403792808862$35$$35$d3Ya) lq_anf$36$$35$$35$7205759403792808863$35$$35$d3Yb) Demo.Client.$36$trModule) lq_anf$36$$35$$35$7205759403792808865$35$$35$d3Yd) lq_anf$36$$35$$35$7205759403792808866$35$$35$d3Ye) fix$36$$36$krep_a3XH)))
(define-fun b$36$$35$$35$109 () Bool (and (is-Demo.Client.B Demo.Client.B) (not (is-Demo.Client.A Demo.Client.B)) (not (is-Demo.Client.C Demo.Client.B)) (= Demo.Client.B Demo.Client.B)))
(define-fun b$36$$35$$35$141 () Bool (= lq_anf$36$$35$$35$7205759403792808860$35$$35$d3Y8 (apply$35$$35$18 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792808859$35$$35$d3Y7)))
(define-fun b$36$$35$$35$173 () Bool (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.TyCon lq_anf$36$$35$$35$7205759403792808857$35$$35$d3Y5) lq_anf$36$$35$$35$7205759403792808858$35$$35$d3Y6) Demo.Client.$36$trModule) lq_anf$36$$35$$35$7205759403792808860$35$$35$d3Y8) lq_anf$36$$35$$35$7205759403792808861$35$$35$d3Y9) fix$36$$36$krep_a3XH)))
(define-fun b$36$$35$$35$110 () Bool (and (is-Demo.Client.C Demo.Client.C) (not (is-Demo.Client.A Demo.Client.C)) (not (is-Demo.Client.B Demo.Client.C)) (= Demo.Client.C Demo.Client.C)))
(define-fun b$36$$35$$35$142 () Bool (= lq_anf$36$$35$$35$7205759403792808861$35$$35$d3Y9 0))
(define-fun b$36$$35$$35$174 () Bool (= VV$35$$35$F$35$$35$7 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.KindRepTyConApp Demo.Client.$36$tcSimple) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4)))
(define-fun b$36$$35$$35$175 () Bool (= VV$35$$35$F$35$$35$8 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.TyCon lq_anf$36$$35$$35$7205759403792808851$35$$35$d3XZ) lq_anf$36$$35$$35$7205759403792808852$35$$35$d3Y0) Demo.Client.$36$trModule) lq_anf$36$$35$$35$7205759403792808854$35$$35$d3Y2) lq_anf$36$$35$$35$7205759403792808855$35$$35$d3Y3) GHC.Types.krep$36$$42$)))
(define-fun b$36$$35$$35$144 () Bool (= lq_anf$36$$35$$35$7205759403792808862$35$$35$d3Ya 3548196456600749870))
(define-fun b$36$$35$$35$176 () Bool (= VV$35$$35$F$35$$35$9 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.Module lq_anf$36$$35$$35$7205759403792808848$35$$35$d3XW) lq_anf$36$$35$$35$7205759403792808850$35$$35$d3XY)))
(define-fun b$36$$35$$35$145 () Bool (= lq_anf$36$$35$$35$7205759403792808863$35$$35$d3Yb 15474012336703941246))
(define-fun b$36$$35$$35$177 () Bool (= VV$35$$35$F$35$$35$10 (apply$35$$35$0 (apply$35$$35$72 (as Language.Haskell.Liquid.Equational.$42$$42$$42$ Int) lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU) Language.Haskell.Liquid.Equational.QED)))
(define-fun b$36$$35$$35$146 () Bool (= lq_anf$36$$35$$35$7205759403792808864$35$$35$d3Yc lit$36$$39$B))
(define-fun b$36$$35$$35$178 () Bool (and (is-GHC.Maybe.Just VV$35$$35$F$35$$35$13) (not (is-GHC.Maybe.Nothing VV$35$$35$F$35$$35$13)) (= VV$35$$35$F$35$$35$13 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) (= VV$35$$35$F$35$$35$13 ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) GHC.Types.True)) (= (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 VV$35$$35$F$35$$35$13) GHC.Types.True)))
(define-fun b$36$$35$$35$147 () Bool (= lq_anf$36$$35$$35$7205759403792808865$35$$35$d3Yd (apply$35$$35$18 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792808864$35$$35$d3Yc)))
(define-fun b$36$$35$$35$179 () Bool (and (is-GHC.Maybe.Just VV$35$$35$F$35$$35$14) (not (is-GHC.Maybe.Nothing VV$35$$35$F$35$$35$14)) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) (= VV$35$$35$F$35$$35$14 ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) GHC.Types.True)) (= (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 VV$35$$35$F$35$$35$14) GHC.Types.True)))
(define-fun b$36$$35$$35$148 () Bool (= lq_anf$36$$35$$35$7205759403792808866$35$$35$d3Ye 0))
(define-fun b$36$$35$$35$180 () Bool (and (= VV$35$$35$F$35$$35$16 lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) (= VV$35$$35$F$35$$35$16 (apply$35$$35$62 Demo.Client.test Demo.Client.A)) (= VV$35$$35$F$35$$35$16 (ite (is-Demo.Client.A Demo.Client.A) ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) true) (ite (is-Demo.Client.B Demo.Client.A) (as GHC.Maybe.Nothing (GHC.Maybe.Maybe Bool)) (as GHC.Maybe.Nothing (GHC.Maybe.Maybe Bool)))))))
(define-fun b$36$$35$$35$150 () Bool (= lq_anf$36$$35$$35$7205759403792808867$35$$35$d3Yf 5457438625611575275))
(define-fun b$36$$35$$35$151 () Bool (= lq_anf$36$$35$$35$7205759403792808868$35$$35$d3Yg 4673484166226047726))
(define-fun b$36$$35$$35$120 () Bool (and (= lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS (apply$35$$35$62 Demo.Client.test Demo.Client.A)) (= lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS (ite (is-Demo.Client.A Demo.Client.A) ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) true) (ite (is-Demo.Client.B Demo.Client.A) (as GHC.Maybe.Nothing (GHC.Maybe.Maybe Bool)) (as GHC.Maybe.Nothing (GHC.Maybe.Maybe Bool)))))))
(define-fun b$36$$35$$35$152 () Bool (= lq_anf$36$$35$$35$7205759403792808869$35$$35$d3Yh lit$36$$39$C))
(define-fun b$36$$35$$35$25 () Bool (= Demo.Client.B Demo.Client.B))
(define-fun b$36$$35$$35$121 () Bool (and (is-GHC.Maybe.Just lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) (not (is-GHC.Maybe.Nothing lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT)) (= lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) GHC.Types.True)) (= (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) GHC.Types.True)))
(define-fun b$36$$35$$35$153 () Bool (= lq_anf$36$$35$$35$7205759403792808870$35$$35$d3Yi (apply$35$$35$18 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792808869$35$$35$d3Yh)))
(define-fun b$36$$35$$35$26 () Bool (= GHC.Types.True GHC.Types.True))
(define-fun b$36$$35$$35$154 () Bool (= lq_anf$36$$35$$35$7205759403792808871$35$$35$d3Yj 0))
(define-fun b$36$$35$$35$27 () Bool (= Language.Haskell.Liquid.Equational.QED Language.Haskell.Liquid.Equational.QED))
(define-fun b$36$$35$$35$123 () Bool (= (apply$35$$35$62 Demo.Client.test Demo.Client.A) ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) true)))
(define-fun b$36$$35$$35$124 () Bool (= lq_anf$36$$35$$35$7205759403792808847$35$$35$d3XV lit$36$main))
(define-fun b$36$$35$$35$125 () Bool (= lq_anf$36$$35$$35$7205759403792808848$35$$35$d3XW (apply$35$$35$18 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792808847$35$$35$d3XV)))
(define-fun b$36$$35$$35$157 () Bool (= lq_anf$36$$35$$35$7205759403792808872$35$$35$d3Yk 0))
(define-fun b$36$$35$$35$30 () Bool (= Demo.Client.A Demo.Client.A))
(define-fun b$36$$35$$35$62 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$126 () Bool (= lq_anf$36$$35$$35$7205759403792808849$35$$35$d3XX lit$36$Demo.Client))
(define-fun b$36$$35$$35$158 () Bool (and (= lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792808872$35$$35$d3Yk)) (= lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl lq_anf$36$$35$$35$7205759403792808872$35$$35$d3Yk)))
(define-fun b$36$$35$$35$127 () Bool (= lq_anf$36$$35$$35$7205759403792808850$35$$35$d3XY (apply$35$$35$18 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792808849$35$$35$d3XX)))
(define-fun b$36$$35$$35$159 () Bool (and (= lq_anf$36$$35$$35$7205759403792808874$35$$35$d3Ym (> n$35$$35$a3WQ lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl)) (= lq_anf$36$$35$$35$7205759403792808874$35$$35$d3Ym (apply$35$$35$1 (apply$35$$35$0 (as GHC.Classes.$62$ Int) n$35$$35$a3WQ) lq_anf$36$$35$$35$7205759403792808873$35$$35$d3Yl))))
(push 1)
(push 1)
(assert (and (exists ((lq_karg$36$VV$35$$35$550$35$$35$k_$35$$35$551 Int) (VV$35$$35$550 Int) (lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$551 Int)) (and (= VV$35$$35$550 fix$36$$36$krep_a3XH) (= lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$551 Demo.Client.testProof) (= lq_karg$36$VV$35$$35$550$35$$35$k_$35$$35$551 fix$36$$36$krep_a3XH) (exists ((lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4 Int) (VV$35$$35$F$35$$35$7 Int)) (and (= smt_set_emp (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4)) (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4)) (= lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4 (as GHC.Types.$91$$93$ Int)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) smt_set_emp) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4) 0) (= VV$35$$35$F$35$$35$7 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.KindRepTyConApp Demo.Client.$36$tcSimple) lq_anf$36$$35$$35$7205759403792808856$35$$35$d3Y4)) (= lq_karg$36$Demo.Client.testProof$35$$35$k_$35$$35$551 Demo.Client.testProof) (= lq_karg$36$VV$35$$35$550$35$$35$k_$35$$35$551 VV$35$$35$F$35$$35$7))))) b$36$$35$$35$32 b$36$$35$$35$160 b$36$$35$$35$34 b$36$$35$$35$67 b$36$$35$$35$164 b$36$$35$$35$165 b$36$$35$$35$170 b$36$$35$$35$108 b$36$$35$$35$109 b$36$$35$$35$110 b$36$$35$$35$25 b$36$$35$$35$26 b$36$$35$$35$27 b$36$$35$$35$123 b$36$$35$$35$157 b$36$$35$$35$30 b$36$$35$$35$62 b$36$$35$$35$158 b$36$$35$$35$159))
(push 1)
(assert (not (< 0 VV$35$$35$F$35$$35$1)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (or (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT$35$$35$k_$35$$35$455 (GHC.Maybe.Maybe Bool)) (lq_tmp$36$x$35$$35$457 (GHC.Maybe.Maybe Bool)) (lq_karg$36$lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS$35$$35$k_$35$$35$455 (GHC.Maybe.Maybe Bool)) (lq_karg$36$VV$35$$35$454$35$$35$k_$35$$35$455 (GHC.Maybe.Maybe Bool))) (and (= lq_karg$36$VV$35$$35$454$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) (= lq_tmp$36$x$35$$35$457 lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU) (exists ((VV$35$$35$F$35$$35$16 (GHC.Maybe.Maybe Bool))) (and (= VV$35$$35$F$35$$35$16 lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) (= VV$35$$35$F$35$$35$16 (apply$35$$35$62 Demo.Client.test Demo.Client.A)) (= VV$35$$35$F$35$$35$16 (ite (is-Demo.Client.A Demo.Client.A) ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) true) (ite (is-Demo.Client.B Demo.Client.A) (as GHC.Maybe.Nothing (GHC.Maybe.Maybe Bool)) (as GHC.Maybe.Nothing (GHC.Maybe.Maybe Bool))))) (= lq_karg$36$VV$35$$35$454$35$$35$k_$35$$35$455 VV$35$$35$F$35$$35$16) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT))))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT$35$$35$k_$35$$35$455 (GHC.Maybe.Maybe Bool)) (lq_tmp$36$x$35$$35$457 (GHC.Maybe.Maybe Bool)) (lq_karg$36$lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS$35$$35$k_$35$$35$455 (GHC.Maybe.Maybe Bool)) (lq_karg$36$VV$35$$35$454$35$$35$k_$35$$35$455 (GHC.Maybe.Maybe Bool))) (and (= lq_karg$36$VV$35$$35$454$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) (= lq_tmp$36$x$35$$35$457 lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU) (exists ((VV$35$$35$F$35$$35$14 (GHC.Maybe.Maybe Bool))) (and (is-GHC.Maybe.Just VV$35$$35$F$35$$35$14) (not (is-GHC.Maybe.Nothing VV$35$$35$F$35$$35$14)) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) (= VV$35$$35$F$35$$35$14 ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) GHC.Types.True)) (= (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 VV$35$$35$F$35$$35$14) GHC.Types.True) (= lq_karg$36$VV$35$$35$454$35$$35$k_$35$$35$455 VV$35$$35$F$35$$35$14) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT$35$$35$k_$35$$35$455 lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT)))))) b$36$$35$$35$32 b$36$$35$$35$34 b$36$$35$$35$67 b$36$$35$$35$108 b$36$$35$$35$109 b$36$$35$$35$110 b$36$$35$$35$177 b$36$$35$$35$120 b$36$$35$$35$25 b$36$$35$$35$121 b$36$$35$$35$26 (and (= lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) (= lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT) (= lq_anf$36$$35$$35$7205759403792808846$35$$35$d3XU (apply$35$$35$80 (apply$35$$35$72 (as Language.Haskell.Liquid.Equational.$61$$61$. Int) lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS) lq_anf$36$$35$$35$7205759403792808845$35$$35$d3XT))) b$36$$35$$35$27 b$36$$35$$35$30 b$36$$35$$35$62))
(push 1)
(assert (not (= (apply$35$$35$62 Demo.Client.test Demo.Client.A) ((as GHC.Maybe.Just (GHC.Maybe.Maybe Bool)) true))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$32 b$36$$35$$35$34 b$36$$35$$35$67 b$36$$35$$35$108 b$36$$35$$35$109 b$36$$35$$35$110 b$36$$35$$35$178 b$36$$35$$35$120 b$36$$35$$35$25 b$36$$35$$35$121 b$36$$35$$35$26 b$36$$35$$35$27 b$36$$35$$35$30 b$36$$35$$35$62))
(push 1)
(assert (not (= lq_anf$36$$35$$35$7205759403792808844$35$$35$d3XS VV$35$$35$F$35$$35$13)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(pop 1)
