{"o_vars":null,"o_types":[[{"realSpan":true,"spanInfo":{"endCol":1,"endLine":1,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":1}},[["Demo.Client.$trModule","GHC.Types.Module"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":29,"startLine":12}},[["n","{v : GHC.Types.Int | v == n}"]]],[{"realSpan":true,"spanInfo":{"endCol":14,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":13,"startLine":12}},[["n","{v : GHC.Types.Int | v == n}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":3,"startLine":24}},[["lq_anf$##7205759403792808846","(GHC.Maybe.Maybe GHC.Types.Bool)"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":25,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":7,"startLine":25}},[["Language.Haskell.Liquid.Equational.QED","{v : Language.Haskell.Liquid.Equational.QED | v == QED}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":14,"startLine":24}},[["lq_anf$##7205759403792808845","{v : (GHC.Maybe.Maybe GHC.Types.Bool) | v == Just True\n                                        && lqdc##$select v == True}"]]],[{"realSpan":true,"spanInfo":{"endCol":5,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":18}},[["Demo.Client.test","x1:Demo.Client.Simple -> {VV : (GHC.Maybe.Maybe GHC.Types.Bool) | VV == test x1}"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":25,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":23}},[["Language.Haskell.Liquid.Equational.***","{VV : forall a .\n      a -> Language.Haskell.Liquid.Equational.QED -> () | VV == ***}"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":23,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":23}},[["Demo.Client.testProof","{VV : () | test A == Just true}"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":36,"startLine":12}},[["lq_anf$##7205759403792808876","{v : GHC.Prim.Int# | v == 0}"]]],[{"realSpan":true,"spanInfo":{"endCol":17,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":18}},[["lq_anf$##7205759403792808843","Demo.Client.Simple"]]],[{"realSpan":true,"spanInfo":{"endCol":19,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":10,"startLine":18}},[["GHC.Maybe.Just","{VV : forall a .\n      x1:a -> {v : (GHC.Maybe.Maybe a) | v == Just x1\n                                         && lqdc##$select v == x1} | VV == Just}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":19,"startLine":24}},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"realSpan":true,"spanInfo":{"endCol":18,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":17,"startLine":12}},[["lq_anf$##7205759403792808873","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":7,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":6,"startLine":12}},[["n","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":19,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":15,"startLine":18}},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"realSpan":true,"spanInfo":{"endCol":17,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":10,"startLine":19}},[[null,"{VV : forall a .\n      {v : (GHC.Maybe.Maybe a) | v == Nothing} | VV == Nothing}"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":3,"startLine":24}},[["lq_anf$##7205759403792808844","{v : (GHC.Maybe.Maybe GHC.Types.Bool) | v == test A}"]]],[{"realSpan":true,"spanInfo":{"endCol":5,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":12}},[["Demo.Client.bump","GHC.Types.Int -> GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":12}},[["lq_anf$##7205759403792808875","GHC.Types.Bool"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":24,"startLine":12}},[["Demo.Lib.incr","{v : GHC.Types.Int | 0 < v} -> {v : GHC.Types.Int | 0 < v}"]]],[{"realSpan":true,"spanInfo":{"endCol":18,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":13,"startLine":12}},[["lq_anf$##7205759403792808874","GHC.Types.Bool"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":8,"startLine":24}},[["Demo.Client.A","{v : Demo.Client.Simple | v == A}"]]]],"o_templs":[[{"realSpan":true,"spanInfo":{"endCol":1,"endLine":1,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":1}},[["Demo.Client.$trModule","{VV##480 : GHC.Types.Module | $k_##481}"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":29,"startLine":12}},[["n","{lq_tmp$x##762 : GHC.Types.Int | lq_tmp$x##762 == n##a3WQ}"]]],[{"realSpan":true,"spanInfo":{"endCol":14,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":13,"startLine":12}},[["n","{lq_tmp$x##736 : GHC.Types.Int | lq_tmp$x##736 == n##a3WQ}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":3,"startLine":24}},[["lq_anf$##7205759403792808846","{lq_tmp$x##457 : (GHC.Maybe.Maybe {lq_tmp$x##456 : GHC.Types.Bool | $k_##453[VV##452:=lq_tmp$x##456][VV##454:=lq_tmp$x##457][lq_tmp$x##450:=lq_anf$##7205759403792808844##d3XS][lq_tmp$x##451:=lq_anf$##7205759403792808845##d3XT]}) | lq_tmp$x##457 == lq_anf$##7205759403792808844##d3XS\n                                                                                                                                                                                                                                       && lq_tmp$x##457 == lq_anf$##7205759403792808845##d3XT\n                                                                                                                                                                                                                                       && lq_tmp$x##457 == Language.Haskell.Liquid.Equational.==. lq_anf$##7205759403792808844##d3XS lq_anf$##7205759403792808845##d3XT\n                                                                                                                                                                                                                                       && $k_##455[VV##454:=lq_tmp$x##457][lq_tmp$x##450:=lq_anf$##7205759403792808844##d3XS][lq_tmp$x##451:=lq_anf$##7205759403792808845##d3XT]}"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":25,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":7,"startLine":25}},[["Language.Haskell.Liquid.Equational.QED","{lq_tmp$x##478 : Language.Haskell.Liquid.Equational.QED | lq_tmp$x##478 == Language.Haskell.Liquid.Equational.QED}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":14,"startLine":24}},[["lq_anf$##7205759403792808845","{lq_tmp$x##437 : (GHC.Maybe.Maybe {lq_tmp$x##442 : GHC.Types.Bool | $k_##441[VV##440:=lq_tmp$x##442][lq_tmp$x##439:=GHC.Types.True]}) | is$GHC.Maybe.Just lq_tmp$x##437\n                                                                                                                                        && not (is$GHC.Maybe.Nothing lq_tmp$x##437)\n                                                                                                                                        && lq_tmp$x##437 == GHC.Maybe.Just GHC.Types.True\n                                                                                                                                        && lqdc##$select##GHC.Maybe.Just##1 lq_tmp$x##437 == GHC.Types.True}"]]],[{"realSpan":true,"spanInfo":{"endCol":5,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":18}},[["Demo.Client.test","lq_tmp$x##388:Demo.Client.Simple -> {VV : (GHC.Maybe.Maybe GHC.Types.Bool) | VV == Demo.Client.test lq_tmp$x##388\n                                                                             && VV == (if is$Demo.Client.A lq_tmp$x##388 then GHC.Maybe.Just true else (if is$Demo.Client.B lq_tmp$x##388 then GHC.Maybe.Nothing else GHC.Maybe.Nothing))}"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":25,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":23}},[["Language.Haskell.Liquid.Equational.***","{VV : forall a .\n      lq_tmp$x##468:a -> lq_tmp$x##469:Language.Haskell.Liquid.Equational.QED -> () | VV == Language.Haskell.Liquid.Equational.***}"]]],[{"realSpan":true,"spanInfo":{"endCol":10,"endLine":23,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":23}},[["Demo.Client.testProof","{VV : () | Demo.Client.test Demo.Client.A == GHC.Maybe.Just true}"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":36,"startLine":12}},[["lq_anf$##7205759403792808876","{lq_tmp$x##746 : GHC.Prim.Int# | lq_tmp$x##746 == 0}"]]],[{"realSpan":true,"spanInfo":{"endCol":17,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":18}},[["lq_anf$##7205759403792808843","{lq_tmp$x##391 : Demo.Client.Simple | lq_tmp$x##391 == ds_d3XK}"]]],[{"realSpan":true,"spanInfo":{"endCol":19,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":10,"startLine":18}},[["GHC.Maybe.Just","{VV : forall a .\n      lq_tmp$x##402:a -> {lq_tmp$x##400 : (GHC.Maybe.Maybe a) | is$GHC.Maybe.Just lq_tmp$x##400\n                                                                && not (is$GHC.Maybe.Nothing lq_tmp$x##400)\n                                                                && lq_tmp$x##400 == GHC.Maybe.Just lq_tmp$x##402\n                                                                && lqdc##$select##GHC.Maybe.Just##1 lq_tmp$x##400 == lq_tmp$x##402} | VV == GHC.Maybe.Just}"]]],[{"realSpan":true,"spanInfo":{"endCol":23,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":19,"startLine":24}},[["GHC.Types.True","{lq_tmp$x##443 : GHC.Types.Bool | lq_tmp$x##443\n                                  && lq_tmp$x##443 == GHC.Types.True}"]]],[{"realSpan":true,"spanInfo":{"endCol":18,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":17,"startLine":12}},[["lq_anf$##7205759403792808873","{lq_tmp$x##715 : GHC.Types.Int | lq_tmp$x##715 == GHC.Types.I# lq_anf$##7205759403792808872##d3Yk\n                                 && lq_tmp$x##715 == (lq_anf$##7205759403792808872##d3Yk : int)}"]]],[{"realSpan":true,"spanInfo":{"endCol":7,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":6,"startLine":12}},[["n","GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":19,"endLine":18,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":15,"startLine":18}},[["GHC.Types.True","{lq_tmp$x##406 : GHC.Types.Bool | lq_tmp$x##406\n                                  && lq_tmp$x##406 == GHC.Types.True}"]]],[{"realSpan":true,"spanInfo":{"endCol":17,"endLine":19,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":10,"startLine":19}},[[null,"{VV : forall a .\n      {lq_tmp$x##423 : (GHC.Maybe.Maybe a) | is$GHC.Maybe.Nothing lq_tmp$x##423\n                                             && not (is$GHC.Maybe.Just lq_tmp$x##423)\n                                             && lq_tmp$x##423 == GHC.Maybe.Nothing} | VV == GHC.Maybe.Nothing}"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":3,"startLine":24}},[["lq_anf$##7205759403792808844","{lq_tmp$x##430 : (GHC.Maybe.Maybe GHC.Types.Bool) | lq_tmp$x##430 == Demo.Client.test Demo.Client.A\n                                                    && lq_tmp$x##430 == (if is$Demo.Client.A Demo.Client.A then GHC.Maybe.Just true else (if is$Demo.Client.B Demo.Client.A then GHC.Maybe.Nothing else GHC.Maybe.Nothing))}"]]],[{"realSpan":true,"spanInfo":{"endCol":5,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":12}},[["Demo.Client.bump","lq_tmp$x##710:GHC.Types.Int -> GHC.Types.Int"]]],[{"realSpan":true,"spanInfo":{"endCol":37,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":1,"startLine":12}},[["lq_anf$##7205759403792808875","{lq_tmp$x##739 : GHC.Types.Bool | (lq_tmp$x##739 <=> n##a3WQ > lq_anf$##7205759403792808873##d3Yl)\n                                  && lq_tmp$x##739 == lq_anf$##7205759403792808874##d3Ym\n                                  && lq_tmp$x##739 == GHC.Classes.> n##a3WQ lq_anf$##7205759403792808873##d3Yl}"]]],[{"realSpan":true,"spanInfo":{"endCol":30,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":24,"startLine":12}},[["Demo.Lib.incr","lq_tmp$x##761:{lq_tmp$x##758 : GHC.Types.Int | 0 < lq_tmp$x##758} -> {lq_tmp$x##759 : GHC.Types.Int | 0 < lq_tmp$x##759}"]]],[{"realSpan":true,"spanInfo":{"endCol":18,"endLine":12,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":13,"startLine":12}},[["lq_anf$##7205759403792808874","{lq_tmp$x##724 : GHC.Types.Bool | (lq_tmp$x##724 <=> n##a3WQ > lq_anf$##7205759403792808873##d3Yl)\n                                  && lq_tmp$x##724 == GHC.Classes.> n##a3WQ lq_anf$##7205759403792808873##d3Yl}"]]],[{"realSpan":true,"spanInfo":{"endCol":9,"endLine":24,"filename":"/home/alvarorp00/Documents/uam/master/verification/liquid-haskell/session20/src/Demo/Client.hs","startCol":8,"startLine":24}},[["Demo.Client.A","{lq_tmp$x##433 : Demo.Client.Simple | is$Demo.Client.A lq_tmp$x##433\n                                      && not (is$Demo.Client.B lq_tmp$x##433)\n                                      && not (is$Demo.Client.C lq_tmp$x##433)\n                                      && lq_tmp$x##433 == Demo.Client.A}"]]]],"o_bots":[],"o_result":{"tag":"Safe","contents":{"numCstr":8,"numIter":8,"numBrkt":3,"numChck":3,"numVald":3}}}