(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun totalityError () Int)
(declare-fun Data.Set.Internal.singleton () Int)
(declare-fun Data.Set.Internal.union () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun lq_tmp$36$x$35$$35$486 () Int)
(declare-fun Demo.Lib.$36$trModule () Int)
(declare-fun GHC.Float.sinh () Int)
(declare-fun lq_tmp$36$x$35$$35$359 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun lq_karg$36$VV$35$$35$29$35$$35$k_$35$$35$30 () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_tmp$36$x$35$$35$492 () Int)
(declare-fun GHC.Float.atanh () Int)
(declare-fun lq_karg$36$VV$35$$35$502$35$$35$k_$35$$35$503 () Int)
(declare-fun GHC.Float.tan () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun GHC.Float.asinh () Int)
(declare-fun Data.Set.Internal.insert () Int)
(declare-fun lq_karg$36$VV$35$$35$33$35$$35$k_$35$$35$34 () Int)
(declare-fun GHC.Float.pi () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Demo.Lib.rev () Int)
(declare-fun GHC.Float.tanh () Int)
(declare-fun VV$35$$35$F$35$$35$7 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801869$35$$35$d29n () Str)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Data.Set.Internal.toList () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$492$35$$35$k_$35$$35$494 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$509$35$$35$k_$35$$35$34 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun VV$35$$35$F$35$$35$9 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$489$35$$35$k_$35$$35$503 () Int)
(declare-fun papp5 () Int)
(declare-fun snd () Int)
(declare-fun VV$35$$35$F$35$$35$32 () Int)
(declare-fun lq_tmp$36$x$35$$35$509 () Int)
(declare-fun lq_tmp$36$x$35$$35$510 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$499 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801873$35$$35$d29r () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$506$35$$35$k_$35$$35$34 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801871$35$$35$d29p () Str)
(declare-fun Data.Set.Internal.Tip () LSet)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun Data.Set.Internal.null () Int)
(declare-fun lq_tmp$36$x$35$$35$626 () Int)
(declare-fun GHC.Float.sqrt () Int)
(declare-fun Data.Set.Internal.member () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun lq_tmp$36$x$35$$35$671 () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun Demo.Lib.incr () Int)
(declare-fun VV$35$$35$F$35$$35$19 () Int)
(declare-fun lq_tmp$36$x$35$$35$591 () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Float.logBase () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lq_karg$36$VV$35$$35$493$35$$35$k_$35$$35$494 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801872$35$$35$d29q () Int)
(declare-fun go$35$$35$a1cL () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun xs$35$$35$a1c7 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$506$35$$35$k_$35$$35$36 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.Float.asin () Int)
(declare-fun VV$35$$35$F$35$$35$23 () Int)
(declare-fun Data.Set.Internal.difference () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$693 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_karg$36$VV$35$$35$35$35$$35$k_$35$$35$36 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Float.atan () Int)
(declare-fun Data.Set.Internal.intersection () Int)
(declare-fun lq_karg$36$VV$35$$35$31$35$$35$k_$35$$35$32 () Int)
(declare-fun GHC.Float.$42$$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$488 () Int)
(declare-fun lq_tmp$36$x$35$$35$625 () Int)
(declare-fun cast_as () Int)
(declare-fun Data.Set.Internal.Bin () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun x$35$$35$a1c0 () Int)
(declare-fun len () Int)
(declare-fun lq_karg$36$VV$35$$35$495$35$$35$k_$35$$35$496 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801870$35$$35$d29o () Int)
(declare-fun Data.Set.Internal.empty () LSet)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun listElts () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun GHC.Float.acos () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun lq_karg$36$VV$35$$35$490$35$$35$k_$35$$35$491 () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$508 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_karg$36$VV$35$$35$707$35$$35$k_$35$$35$708 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Float.acosh () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun VV$35$$35$F$35$$35$24 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$598 () Int)
(declare-fun fst () Int)
(declare-fun x$35$$35$a1c6 () Int)
(declare-fun fix$36$$36$dOrd_a1dh () Int)
(declare-fun ds_d28K () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun Data.Set.Internal.$36$WBin () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Int)
(declare-fun Data.Set.Internal.fromList () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_tmp$36$x$35$$35$449 () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Float.cosh () Int)
(declare-fun VV$35$$35$F$35$$35$3 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun VV$35$$35$F$35$$35$8 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$506$35$$35$k_$35$$35$32 () Int)
(declare-fun lit$36$session20$45$0.1.0.0$45$A6BJtLXVdCR9OUp5HDKZbt () Str)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801874$35$$35$d29s () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Float.log () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun GHC.Float.sin () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun lit$36$Demo.Lib () Str)
(declare-fun head () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun lq_tmp$36$x$35$$35$489 () Int)
(declare-fun Demo.Lib.elts () Int)
(declare-fun VV$35$$35$F$35$$35$22 () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_tmp$36$x$35$$35$692 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun acc$35$$35$a1c4 () Int)
(declare-fun VV$35$$35$F$35$$35$12 () Int)
(declare-fun Data.Set.Internal.delete () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun GHC.Float.exp () Int)
(declare-fun Data.Set.Internal.isSubsetOf () Int)
(declare-fun VV$35$$35$F$35$$35$4 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun x$35$$35$a1c1 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun VV$35$$35$F$35$$35$1 () Int)
(declare-fun papp2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun go$35$$35$a1c3 () Int)
(declare-fun GHC.Float.cos () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun apply$35$$35$31 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$25 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$35 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$34 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$28 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$29 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$26 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$32 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$15 (Int Str) LSet)
(declare-fun apply$35$$35$3 (Int Int) LSet)
(declare-fun apply$35$$35$18 (Int LSet) Int)
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$16 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$17 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$22 (Int LSet) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int LSet) (_ BitVec 64))
(declare-fun apply$35$$35$20 (Int LSet) Str)
(declare-fun apply$35$$35$30 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$21 (Int LSet) LSet)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$19 (Int LSet) Bool)
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$10 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$11 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$9 (Int Bool) LSet)
(declare-fun apply$35$$35$33 (Int (_ BitVec 64)) LSet)
(declare-fun apply$35$$35$27 (Int (_ BitVec 32)) LSet)
(declare-fun coerce$35$$35$31 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$25 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$35 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$34 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$28 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$29 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$26 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$32 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$15 (Str) LSet)
(declare-fun coerce$35$$35$3 (Int) LSet)
(declare-fun coerce$35$$35$18 (LSet) Int)
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$16 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$17 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$22 (LSet) (_ BitVec 32))
(declare-fun coerce$35$$35$23 (LSet) (_ BitVec 64))
(declare-fun coerce$35$$35$20 (LSet) Str)
(declare-fun coerce$35$$35$30 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$21 (LSet) LSet)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$19 (LSet) Bool)
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$10 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$11 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$9 (Bool) LSet)
(declare-fun coerce$35$$35$33 ((_ BitVec 64)) LSet)
(declare-fun coerce$35$$35$27 ((_ BitVec 32)) LSet)
(declare-fun smt_lambda$35$$35$31 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$25 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$35 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$34 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$28 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$29 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$26 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$32 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$15 (Str LSet) Int)
(declare-fun smt_lambda$35$$35$3 (Int LSet) Int)
(declare-fun smt_lambda$35$$35$18 (LSet Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$16 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$17 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$22 (LSet (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 (LSet (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$20 (LSet Str) Int)
(declare-fun smt_lambda$35$$35$30 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$21 (LSet LSet) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$19 (LSet Bool) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Bool LSet) Int)
(declare-fun smt_lambda$35$$35$33 ((_ BitVec 64) LSet) Int)
(declare-fun smt_lambda$35$$35$27 ((_ BitVec 32) LSet) Int)
(declare-fun lam_arg$35$$35$1$35$$35$18 () LSet)
(declare-fun lam_arg$35$$35$2$35$$35$18 () LSet)
(declare-fun lam_arg$35$$35$3$35$$35$18 () LSet)
(declare-fun lam_arg$35$$35$4$35$$35$18 () LSet)
(declare-fun lam_arg$35$$35$5$35$$35$18 () LSet)
(declare-fun lam_arg$35$$35$6$35$$35$18 () LSet)
(declare-fun lam_arg$35$$35$7$35$$35$18 () LSet)
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)



(assert (distinct lit$36$Demo.Lib lit$36$session20$45$0.1.0.0$45$A6BJtLXVdCR9OUp5HDKZbt))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(assert (= (strLen lit$36$session20$45$0.1.0.0$45$A6BJtLXVdCR9OUp5HDKZbt) 40))
(assert (= (strLen lit$36$Demo.Lib) 8))
(push 1)
(define-fun b$36$$35$$35$128 () Bool (= lq_anf$36$$35$$35$7205759403792801873$35$$35$d29r 1))
(define-fun b$36$$35$$35$129 () Bool (= lq_anf$36$$35$$35$7205759403792801874$35$$35$d29s lq_anf$36$$35$$35$7205759403792801873$35$$35$d29r))
(define-fun b$36$$35$$35$133 () Bool (>= (apply$35$$35$0 (as len Int) lq_tmp$36$x$35$$35$486) 0))
(define-fun b$36$$35$$35$167 () Bool (= VV$35$$35$F$35$$35$1 (+ x$35$$35$a1c0 lq_anf$36$$35$$35$7205759403792801874$35$$35$d29s)))
(define-fun b$36$$35$$35$169 () Bool (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$3) 0))
(define-fun b$36$$35$$35$48 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$176 () Bool (and (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$12) (smt_set_cup (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) (apply$35$$35$3 (as Demo.Lib.elts Int) lq_tmp$36$x$35$$35$489))) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12) 0)))
(define-fun b$36$$35$$35$177 () Bool (and (= smt_set_emp (apply$35$$35$3 (as listElts Int) VV$35$$35$F$35$$35$15)) (= VV$35$$35$F$35$$35$15 lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$15) smt_set_emp) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$15) 0) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$15) 0)))
(define-fun b$36$$35$$35$114 () Bool (>= (apply$35$$35$0 (as len Int) xs$35$$35$a1c7) 0))
(define-fun b$36$$35$$35$178 () Bool (and (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$19) (smt_set_cup (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) (apply$35$$35$3 (as Demo.Lib.elts Int) xs$35$$35$a1c7))) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$19) 0)))
(define-fun b$36$$35$$35$179 () Bool (and (= VV$35$$35$F$35$$35$22 xs$35$$35$a1c7) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$22) 0)))
(define-fun b$36$$35$$35$117 () Bool (and (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as Demo.Lib.elts Int) acc$35$$35$a1c4))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) x$35$$35$a1c6) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) (+ 1 (apply$35$$35$0 (as len Int) acc$35$$35$a1c4))) (= (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as listElts Int) acc$35$$35$a1c4))) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) acc$35$$35$a1c4) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) 0)))
(define-fun b$36$$35$$35$182 () Bool (and (= VV$35$$35$F$35$$35$25 lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l) (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$25) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as Demo.Lib.elts Int) acc$35$$35$a1c4))) (= (apply$35$$35$0 (as head Int) VV$35$$35$F$35$$35$25) x$35$$35$a1c6) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) (+ 1 (apply$35$$35$0 (as len Int) acc$35$$35$a1c4))) (= (apply$35$$35$3 (as listElts Int) VV$35$$35$F$35$$35$25) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as listElts Int) acc$35$$35$a1c4))) (= (apply$35$$35$0 (as tail Int) VV$35$$35$F$35$$35$25) acc$35$$35$a1c4) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) 0)))
(define-fun b$36$$35$$35$55 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$120 () Bool (and (= smt_set_emp (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) smt_set_emp) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) 0)))
(define-fun b$36$$35$$35$122 () Bool (= lq_anf$36$$35$$35$7205759403792801869$35$$35$d29n lit$36$session20$45$0.1.0.0$45$A6BJtLXVdCR9OUp5HDKZbt))
(define-fun b$36$$35$$35$124 () Bool (= lq_anf$36$$35$$35$7205759403792801871$35$$35$d29p lit$36$Demo.Lib))
(define-fun b$36$$35$$35$127 () Bool (< 0 x$35$$35$a1c0))
(push 1)
(assert (and true b$36$$35$$35$48 b$36$$35$$35$55 b$36$$35$$35$122 b$36$$35$$35$124))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$VV$35$$35$495$35$$35$k_$35$$35$496 Int)) (and (= lq_karg$36$VV$35$$35$495$35$$35$k_$35$$35$496 VV$35$$35$F$35$$35$8) (exists ((VV$35$$35$F$35$$35$3 Int)) (and (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$3) 0) (= lq_karg$36$VV$35$$35$495$35$$35$k_$35$$35$496 VV$35$$35$F$35$$35$3))))) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) 0) b$36$$35$$35$48 b$36$$35$$35$55 b$36$$35$$35$120))
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$8) smt_set_emp)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$8) (smt_set_cup (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$8) (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as tail Int) VV$35$$35$F$35$$35$8) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= smt_set_emp (apply$35$$35$3 (as listElts Int) VV$35$$35$F$35$$35$8))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) (+ 1 (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$8) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$VV$35$$35$490$35$$35$k_$35$$35$491 Int)) (and (= lq_karg$36$VV$35$$35$490$35$$35$k_$35$$35$491 VV$35$$35$F$35$$35$9) (exists ((VV$35$$35$F$35$$35$4 Int)) (= lq_karg$36$VV$35$$35$490$35$$35$k_$35$$35$491 VV$35$$35$F$35$$35$4)))) b$36$$35$$35$48 b$36$$35$$35$55 b$36$$35$$35$120))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$lq_tmp$36$x$35$$35$492$35$$35$k_$35$$35$494 Int) (lq_karg$36$VV$35$$35$493$35$$35$k_$35$$35$494 Int)) (and (= lq_karg$36$VV$35$$35$493$35$$35$k_$35$$35$494 VV$35$$35$F$35$$35$11) (= lq_karg$36$lq_tmp$36$x$35$$35$492$35$$35$k_$35$$35$494 lq_tmp$36$x$35$$35$693) (exists ((lq_tmp$36$x$35$$35$492 Int) (VV$35$$35$F$35$$35$6 Int)) (and (= lq_karg$36$VV$35$$35$493$35$$35$k_$35$$35$494 VV$35$$35$F$35$$35$6) (= lq_karg$36$lq_tmp$36$x$35$$35$492$35$$35$k_$35$$35$494 lq_tmp$36$x$35$$35$492))))) b$36$$35$$35$48 b$36$$35$$35$55 b$36$$35$$35$120))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$11 lq_tmp$36$x$35$$35$693)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$11 lq_tmp$36$x$35$$35$693)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$11 lq_tmp$36$x$35$$35$693)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$11 lq_tmp$36$x$35$$35$693))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$11 lq_tmp$36$x$35$$35$693)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$11 lq_tmp$36$x$35$$35$693)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$48 b$36$$35$$35$177 b$36$$35$$35$55 b$36$$35$$35$120))
(push 1)
(assert (not (> (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$15) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= smt_set_emp (apply$35$$35$3 (as listElts Int) VV$35$$35$F$35$$35$15))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$15) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$15) smt_set_emp)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$15) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (= (apply$35$$35$3 (as Demo.Lib.elts Int) acc$35$$35$a1c4) smt_set_emp) (= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (= smt_set_emp (apply$35$$35$3 (as listElts Int) acc$35$$35$a1c4)) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) (apply$35$$35$0 (as len Int) acc$35$$35$a1c4)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (apply$35$$35$0 (as len Int) acc$35$$35$a1c4)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (apply$35$$35$0 (as len Int) acc$35$$35$a1c4)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (apply$35$$35$0 (as len Int) acc$35$$35$a1c4))) (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$48 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$114 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1c6) xs$35$$35$a1c7)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as Demo.Lib.elts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) x$35$$35$a1c6) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1c7))) (= (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as listElts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) xs$35$$35$a1c7) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$179 b$36$$35$$35$117 b$36$$35$$35$55))
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$22) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$22) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801867$35$$35$d29l))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (= (apply$35$$35$3 (as Demo.Lib.elts Int) acc$35$$35$a1c4) smt_set_emp) (= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (= smt_set_emp (apply$35$$35$3 (as listElts Int) acc$35$$35$a1c4)) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$48 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$114 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1c6) xs$35$$35$a1c7)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as Demo.Lib.elts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) x$35$$35$a1c6) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1c7))) (= (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as listElts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) xs$35$$35$a1c7) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$117 b$36$$35$$35$182 b$36$$35$$35$55))
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$25) smt_set_emp)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= smt_set_emp (apply$35$$35$3 (as listElts Int) VV$35$$35$F$35$$35$25))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$48 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$114 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1c6) xs$35$$35$a1c7)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as Demo.Lib.elts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) x$35$$35$a1c6) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1c7))) (= (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as listElts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) xs$35$$35$a1c7) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$179 b$36$$35$$35$117 b$36$$35$$35$55))
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$22) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$48 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$114 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1c6) xs$35$$35$a1c7)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as Demo.Lib.elts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) x$35$$35$a1c6) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1c7))) (= (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as listElts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) xs$35$$35$a1c7) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$117 b$36$$35$$35$182 b$36$$35$$35$55))
(push 1)
(assert (not (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(push 1)
(assert (and (and (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$32) 0) (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) (and (= VV$35$$35$F$35$$35$32 acc$35$$35$a1c4) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$32) 0)) (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) (and (= smt_set_emp (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k)) (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) smt_set_emp) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$48 b$36$$35$$35$55))
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$32) (smt_set_cup (apply$35$$35$3 (as Demo.Lib.elts Int) acc$35$$35$a1c4) (apply$35$$35$3 (as Demo.Lib.elts Int) ds_d28K)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$128 b$36$$35$$35$129 b$36$$35$$35$167 b$36$$35$$35$48 b$36$$35$$35$55 b$36$$35$$35$127))
(push 1)
(assert (not (< 0 VV$35$$35$F$35$$35$1)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$VV$35$$35$502$35$$35$k_$35$$35$503 Int) (lq_karg$36$lq_tmp$36$x$35$$35$489$35$$35$k_$35$$35$503 Int)) (and (= lq_karg$36$VV$35$$35$502$35$$35$k_$35$$35$503 VV$35$$35$F$35$$35$7) (= lq_karg$36$lq_tmp$36$x$35$$35$489$35$$35$k_$35$$35$503 lq_tmp$36$x$35$$35$486) (exists ((lq_tmp$36$x$35$$35$489 Int) (go$35$$35$a1cL Int) (VV$35$$35$F$35$$35$12 Int) (go$35$$35$a1c3 Int) (lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m Int)) (and (exists ((VV$35$$35$495 Int) (lq_karg$36$VV$35$$35$495$35$$35$k_$35$$35$496 Int)) (and (= VV$35$$35$495 lq_tmp$36$x$35$$35$489) (= lq_karg$36$VV$35$$35$495$35$$35$k_$35$$35$496 lq_tmp$36$x$35$$35$489) (exists ((VV$35$$35$F$35$$35$3 Int)) (and (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$3) 0) (= lq_karg$36$VV$35$$35$495$35$$35$k_$35$$35$496 VV$35$$35$F$35$$35$3))))) (>= (apply$35$$35$0 (as len Int) lq_tmp$36$x$35$$35$489) 0) (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$12) (smt_set_cup (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) (apply$35$$35$3 (as Demo.Lib.elts Int) lq_tmp$36$x$35$$35$489))) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12) 0) (= smt_set_emp (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) smt_set_emp) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801868$35$$35$d29m) 0) (= lq_karg$36$VV$35$$35$502$35$$35$k_$35$$35$503 VV$35$$35$F$35$$35$12) (= lq_karg$36$lq_tmp$36$x$35$$35$489$35$$35$k_$35$$35$503 lq_tmp$36$x$35$$35$489))))) b$36$$35$$35$133 (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$7) 0) b$36$$35$$35$48 b$36$$35$$35$55))
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$7) (apply$35$$35$3 (as Demo.Lib.elts Int) lq_tmp$36$x$35$$35$486))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) (>= (apply$35$$35$0 (as len Int) acc$35$$35$a1c4) 0) (>= (apply$35$$35$0 (as len Int) ds_d28K) 0) (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$48 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$114 b$36$$35$$35$178 (and (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k ds_d28K) (= lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1c6) xs$35$$35$a1c7)) (= (apply$35$$35$3 (as Demo.Lib.elts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as Demo.Lib.elts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) x$35$$35$a1c6) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1c7))) (= (apply$35$$35$3 (as listElts Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) (smt_set_cup (smt_set_sng x$35$$35$a1c6) (apply$35$$35$3 (as listElts Int) xs$35$$35$a1c7))) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) xs$35$$35$a1c7) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792801866$35$$35$d29k) 0)) b$36$$35$$35$117 b$36$$35$$35$55))
(push 1)
(assert (not (= (apply$35$$35$3 (as Demo.Lib.elts Int) VV$35$$35$F$35$$35$19) (smt_set_cup (apply$35$$35$3 (as Demo.Lib.elts Int) acc$35$$35$a1c4) (apply$35$$35$3 (as Demo.Lib.elts Int) ds_d28K)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(pop 1)
