1:1-1:1::LHExercises.$trModule :: "GHC.Types.Module"
40:1-40:9::LHExercises.realSize :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == realSize x1}"
40:19-40:20::lq_anf$##7205759403793234484 :: "{v : GHC.Prim.Int# | v == 0}"
41:19-41:20::lq_anf$##7205759403793234486 :: "GHC.Types.Int"
41:23-41:34::lq_anf$##7205759403793234487 :: "{v : GHC.Types.Int | v == realSize xs}"
41:32-41:34::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
59:1-59:4::LHExercises.nil :: "forall a . {VV : (LHExercises.SList a) | size VV == 0}"
59:23-59:24::lq_anf$##7205759403793234489 :: "GHC.Types.Int"
59:25-59:27::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && realSize v == 0} | VV == []}"
63:1-63:5::LHExercises.cons :: "forall a .\na -> x2:(LHExercises.SList a) -> {VV : (LHExercises.SList a) | size VV == size x2 + 1}"
63:6-63:7::x :: "a"
63:20-63:35::LHExercises.SL :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | realSize v == x1} -> {v : (LHExercises.SList a) | elems v == x2\n                                                                                                         && size v == x1} | VV == SL}"
63:23-63:28::lq_anf$##7205759403793234498 :: "GHC.Types.Int"
63:24-63:25::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
63:26-63:27::lq_anf$##7205759403793234497 :: "GHC.Types.Int"
63:29-63:35::lq_anf$##7205759403793234499 :: "{v : [a] | head v == x\n           && len v == 1 + len xs\n           && realSize v == 1 + realSize xs\n           && tail v == xs}"
63:30-63:31::x :: "{VV : a | VV == x}"
63:32-63:34::xs :: "{v : [a] | v == xs\n           && realSize v == n\n           && len v >= 0}"
68:1-68:3::LHExercises.tl :: "forall a .\nx1:{VV : (LHExercises.SList a) | size VV > 0} -> {VV : (LHExercises.SList a) | size VV == size x1 - 1}"
68:20-68:31::LHExercises.SL :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | realSize v == x1} -> {v : (LHExercises.SList a) | elems v == x2\n                                                                                                         && size v == x1} | VV == SL}"
68:23-68:28::lq_anf$##7205759403793234513 :: "GHC.Types.Int"
68:24-68:25::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
68:26-68:27::lq_anf$##7205759403793234512 :: "GHC.Types.Int"
68:29-68:31::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
71:1-71:3::LHExercises.hd :: "forall a . {VV : (LHExercises.SList a) | size VV > 0} -> a"
71:20-71:21::x :: "{VV : a | VV == x}"
88:1-88:6::LHExercises.qsize :: "forall a .\nx1:(LHExercises.Queue a) -> {VV : GHC.Types.Int | VV == qsize x1}"
88:17-88:23::lq_anf$##7205759403793234553 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
88:22-88:23::f :: "{v : (LHExercises.SList a) | v == f}"
88:26-88:32::lq_anf$##7205759403793234554 :: "{v : GHC.Types.Int | v == size b\n                     && v >= 0}"
88:31-88:32::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
98:1-98:6::LHExercises.makeq :: "forall a .\nx1:(LHExercises.SList a) -> x2:{VV : (LHExercises.SList a) | size VV <= size x1 + 1} -> {VV : (LHExercises.Queue a) | qsize VV == size x1 + size x2}"
98:7-98:8::f :: "(LHExercises.SList a)"
98:9-98:10::b :: "{VV : (LHExercises.SList a) | size VV <= size f + 1}"
99:5-99:11::lq_anf$##7205759403793234531 :: "{v : GHC.Types.Int | v == size b\n                     && v >= 0}"
99:10-99:11::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f + 1}"
99:15-99:21::lq_anf$##7205759403793234532 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
99:20-99:21::f :: "{v : (LHExercises.SList a) | v == f}"
99:24-99:29::LHExercises.Q :: "{VV : forall a .\n      x1:(LHExercises.SList a) -> x2:{v : (LHExercises.SList a) | size v <= size x1} -> {v : (LHExercises.Queue a) | back v == x2\n                                                                                                                     && front v == x1\n                                                                                                                     && qsize v == size x1 + size x2} | VV == Q}"
99:26-99:27::f :: "{v : (LHExercises.SList a) | v == f}"
99:28-99:29::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f + 1}"
100:17-100:36::lq_anf$##7205759403793234537 :: "{v : (LHExercises.SList a) | size v == 0}"
100:19-100:32::lq_anf$##7205759403793234536 :: "(LHExercises.SList a)"
100:24-100:25::f :: "{v : (LHExercises.SList a) | v == f}"
100:26-100:27::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f + 1}"
100:28-100:31::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
100:33-100:36::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
103:1-103:4::LHExercises.rot :: "forall a .\nx1:(LHExercises.SList a) -> x2:{VV : (LHExercises.SList a) | size VV == size x1 + 1} -> x3:(LHExercises.SList a) -> {v : (LHExercises.SList a) | size v == (size x1 + size x2) + size x3}"
103:5-103:6::f :: "(LHExercises.SList a)"
103:7-103:8::b :: "{VV : (LHExercises.SList a) | size VV == size f + 1}"
103:9-103:12::acc :: "(LHExercises.SList a)"
104:5-104:11::lq_anf$##7205759403793234519 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
104:10-104:11::f :: "{v : (LHExercises.SList a) | v == f}"
104:15-104:16::lq_anf$##7205759403793234521 :: "GHC.Types.Int"
104:19-104:23::lq_anf$##7205759403793234530 :: "a"
104:22-104:23::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v == size f + 1}"
104:31-104:34::acc :: "{v : (LHExercises.SList a) | v == acc}"
105:17-105:21::lq_anf$##7205759403793234524 :: "a"
105:20-105:21::f :: "{v : (LHExercises.SList a) | v == f}"
105:29-105:64::lq_anf$##7205759403793234529 :: "(LHExercises.SList a)"
105:33-105:39::lq_anf$##7205759403793234525 :: "{v : (LHExercises.SList a) | size v == size f - 1}"
105:37-105:38::f :: "{v : (LHExercises.SList a) | v == f}"
105:40-105:46::lq_anf$##7205759403793234526 :: "{v : (LHExercises.SList a) | size v == size b - 1}"
105:44-105:45::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v == size f + 1}"
105:47-105:64::lq_anf$##7205759403793234528 :: "{v : (LHExercises.SList a) | size v == size acc + 1}"
105:48-105:52::lq_anf$##7205759403793234527 :: "a"
105:51-105:52::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v == size f + 1}"
105:60-105:63::acc :: "{v : (LHExercises.SList a) | v == acc}"
111:1-111:7::LHExercises.remove :: "forall a .\nx1:(LHExercises.Queue a) -> {mq : (GHC.Maybe.Maybe {VV : (LHExercises.Queue a) | qsize VV == qsize x1 - 1}) | qsize x1 > 0 => isJust mq}"
111:8-111:10::qi :: "(LHExercises.Queue a)"
112:5-112:11::lq_anf$##7205759403793234539 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
112:10-112:11::f :: "{v : (LHExercises.SList a) | v == f}"
112:15-112:16::lq_anf$##7205759403793234541 :: "GHC.Types.Int"
112:20-112:26::lq_anf$##7205759403793234543 :: "{v : GHC.Types.Int | v == size b\n                     && v >= 0}"
112:25-112:26::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
112:30-112:31::lq_anf$##7205759403793234545 :: "GHC.Types.Int"
112:34-112:41::_ :: "{VV : forall a .\n      {v : (GHC.Maybe.Maybe a) | not (isJust v)} | VV == Nothing}"
113:17-113:38::GHC.Maybe.Just :: "{VV : forall a .\n      x1:a -> {v : (GHC.Maybe.Maybe a) | isJust v\n                                         && fromJust v == x1\n                                         && lqdc##$select v == x1} | VV == Just}"
113:22-113:38::lq_anf$##7205759403793234550 :: "(LHExercises.Queue a)"
113:29-113:35::lq_anf$##7205759403793234549 :: "{v : (LHExercises.SList a) | size v == size f - 1}"
113:33-113:34::f :: "{v : (LHExercises.SList a) | v == f}"
113:36-113:37::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
118:1-118:9::LHExercises.okRemove :: "(GHC.Maybe.Maybe (LHExercises.Queue GHC.Num.Integer.Integer))"
118:19-118:28::LHExercises.example2Q :: "{v : (LHExercises.Queue GHC.Num.Integer.Integer) | v == example2Q\n                                                   && qsize v == 2}"
120:1-120:10::LHExercises.badRemove :: "forall a . (GHC.Maybe.Maybe (LHExercises.Queue a))"
120:20-120:29::_ :: "{VV : forall a .\n      {v : (LHExercises.Queue a) | qsize v == 0} | VV == example0Q}"
123:1-123:4::LHExercises.emp :: "forall a . {VV : (LHExercises.Queue a) | qsize VV == 0}"
123:9-123:12::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
123:13-123:16::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
126:1-126:10::LHExercises.example2Q :: "{VV : (LHExercises.Queue GHC.Num.Integer.Integer) | qsize VV == 2}"
126:15-126:40::lq_anf$##7205759403793234504 :: "(LHExercises.SList GHC.Num.Integer.Integer)"
126:16-126:17::lq_anf$##7205759403793234500 :: "{v : GHC.Num.Integer.Integer | v == 1}"
126:25-126:39::lq_anf$##7205759403793234503 :: "(LHExercises.SList GHC.Num.Integer.Integer)"
126:26-126:27::lq_anf$##7205759403793234501 :: "{v : GHC.Num.Integer.Integer | v == 2}"
126:35-126:38::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
126:41-126:44::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
129:1-129:10::LHExercises.example0Q :: "forall a . {VV : (LHExercises.Queue a) | qsize VV == 0}"
129:15-129:18::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
129:19-129:22::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"