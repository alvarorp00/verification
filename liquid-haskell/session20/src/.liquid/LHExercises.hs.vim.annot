1:1-1:1::LHExercises.$trModule :: "GHC.Types.Module"
41:1-41:9::LHExercises.realSize :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == realSize x1}"
41:19-41:20::lq_anf$##7205759403792801721 :: "{v : GHC.Prim.Int# | v == 0}"
42:19-42:20::lq_anf$##7205759403792801723 :: "GHC.Types.Int"
42:23-42:34::lq_anf$##7205759403792801724 :: "{v : GHC.Types.Int | v == realSize xs}"
42:32-42:34::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
60:1-60:4::LHExercises.nil :: "forall a . {VV : (LHExercises.SList a) | size VV == 0}"
60:23-60:24::lq_anf$##7205759403792801726 :: "GHC.Types.Int"
60:25-60:27::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && realSize v == 0} | VV == []}"
64:1-64:5::LHExercises.cons :: "forall a .\na -> x2:(LHExercises.SList a) -> {VV : (LHExercises.SList a) | size VV == size x2 + 1}"
64:6-64:7::x :: "a"
64:20-64:35::LHExercises.SL :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | realSize v == x1} -> {v : (LHExercises.SList a) | elems v == x2\n                                                                                                         && size v == x1} | VV == SL}"
64:23-64:28::lq_anf$##7205759403792801735 :: "GHC.Types.Int"
64:24-64:25::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
64:26-64:27::lq_anf$##7205759403792801734 :: "GHC.Types.Int"
64:29-64:35::lq_anf$##7205759403792801736 :: "{v : [a] | head v == x\n           && len v == 1 + len xs\n           && realSize v == 1 + realSize xs\n           && tail v == xs}"
64:30-64:31::x :: "{VV : a | VV == x}"
64:32-64:34::xs :: "{v : [a] | v == xs\n           && realSize v == n\n           && len v >= 0}"
69:1-69:3::LHExercises.tl :: "forall a .\nx1:{VV : (LHExercises.SList a) | size VV > 0} -> {VV : (LHExercises.SList a) | size VV == size x1 - 1}"
69:20-69:31::LHExercises.SL :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | realSize v == x1} -> {v : (LHExercises.SList a) | elems v == x2\n                                                                                                         && size v == x1} | VV == SL}"
69:23-69:28::lq_anf$##7205759403792801750 :: "GHC.Types.Int"
69:24-69:25::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
69:26-69:27::lq_anf$##7205759403792801749 :: "GHC.Types.Int"
69:29-69:31::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
72:1-72:3::LHExercises.hd :: "forall a . {VV : (LHExercises.SList a) | size VV > 0} -> a"
72:20-72:21::x :: "{VV : a | VV == x}"
89:1-89:6::LHExercises.qsize :: "forall a .\nx1:(LHExercises.Queue a) -> {VV : GHC.Types.Int | VV == qsize x1}"
89:17-89:23::lq_anf$##7205759403792801810 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
89:22-89:23::f :: "{v : (LHExercises.SList a) | v == f}"
89:26-89:32::lq_anf$##7205759403792801811 :: "{v : GHC.Types.Int | v == size b\n                     && v >= 0}"
89:31-89:32::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
99:1-99:6::LHExercises.makeq :: "forall a .\nx1:(LHExercises.SList a) -> x2:{VV : (LHExercises.SList a) | size VV <= size x1 + 1} -> {VV : (LHExercises.Queue a) | qsize VV == size x1 + size x2}"
99:7-99:8::f :: "(LHExercises.SList a)"
99:9-99:10::b :: "{VV : (LHExercises.SList a) | size VV <= size f + 1}"
100:5-100:11::lq_anf$##7205759403792801768 :: "{v : GHC.Types.Int | v == size b\n                     && v >= 0}"
100:10-100:11::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f + 1}"
100:15-100:21::lq_anf$##7205759403792801769 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
100:20-100:21::f :: "{v : (LHExercises.SList a) | v == f}"
100:24-100:29::LHExercises.Q :: "{VV : forall a .\n      x1:(LHExercises.SList a) -> x2:{v : (LHExercises.SList a) | size v <= size x1} -> {v : (LHExercises.Queue a) | back v == x2\n                                                                                                                     && front v == x1\n                                                                                                                     && qsize v == size x1 + size x2} | VV == Q}"
100:26-100:27::f :: "{v : (LHExercises.SList a) | v == f}"
100:28-100:29::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f + 1}"
101:17-101:36::lq_anf$##7205759403792801774 :: "{v : (LHExercises.SList a) | size v == 0}"
101:19-101:32::lq_anf$##7205759403792801773 :: "(LHExercises.SList a)"
101:24-101:25::f :: "{v : (LHExercises.SList a) | v == f}"
101:26-101:27::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f + 1}"
101:28-101:31::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
101:33-101:36::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
104:1-104:4::LHExercises.rot :: "forall a .\nx1:(LHExercises.SList a) -> x2:{VV : (LHExercises.SList a) | size VV == size x1 + 1} -> x3:(LHExercises.SList a) -> {v : (LHExercises.SList a) | size v == (size x1 + size x2) + size x3}"
104:5-104:6::f :: "(LHExercises.SList a)"
104:7-104:8::b :: "{VV : (LHExercises.SList a) | size VV == size f + 1}"
104:9-104:12::acc :: "(LHExercises.SList a)"
105:5-105:11::lq_anf$##7205759403792801756 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
105:10-105:11::f :: "{v : (LHExercises.SList a) | v == f}"
105:15-105:16::lq_anf$##7205759403792801758 :: "GHC.Types.Int"
105:19-105:23::lq_anf$##7205759403792801767 :: "a"
105:22-105:23::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v == size f + 1}"
105:31-105:34::acc :: "{v : (LHExercises.SList a) | v == acc}"
106:17-106:21::lq_anf$##7205759403792801761 :: "a"
106:20-106:21::f :: "{v : (LHExercises.SList a) | v == f}"
106:29-106:64::lq_anf$##7205759403792801766 :: "(LHExercises.SList a)"
106:33-106:39::lq_anf$##7205759403792801762 :: "{v : (LHExercises.SList a) | size v == size f - 1}"
106:37-106:38::f :: "{v : (LHExercises.SList a) | v == f}"
106:40-106:46::lq_anf$##7205759403792801763 :: "{v : (LHExercises.SList a) | size v == size b - 1}"
106:44-106:45::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v == size f + 1}"
106:47-106:64::lq_anf$##7205759403792801765 :: "{v : (LHExercises.SList a) | size v == size acc + 1}"
106:48-106:52::lq_anf$##7205759403792801764 :: "a"
106:51-106:52::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v == size f + 1}"
106:60-106:63::acc :: "{v : (LHExercises.SList a) | v == acc}"
112:1-112:12::LHExercises.removeMaybe :: "forall a .\nx1:(LHExercises.Queue a) -> (GHC.Maybe.Maybe (a, {VV : (LHExercises.Queue a) | qsize VV == qsize x1 - 1}))"
112:13-112:15::qi :: "(LHExercises.Queue a)"
113:5-113:11::lq_anf$##7205759403792801780 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
113:10-113:11::f :: "{v : (LHExercises.SList a) | v == f}"
113:15-113:16::lq_anf$##7205759403792801782 :: "GHC.Types.Int"
113:20-113:26::lq_anf$##7205759403792801784 :: "{v : GHC.Types.Int | v == size b\n                     && v >= 0}"
113:25-113:26::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
113:30-113:31::lq_anf$##7205759403792801786 :: "GHC.Types.Int"
113:34-113:41::_ :: "{VV : forall a .\n      {v : (GHC.Maybe.Maybe a) | not (isJust v)} | VV == Nothing}"
114:5-114:11::lq_anf$##7205759403792801790 :: "{v : GHC.Types.Int | v == size f\n                     && v >= 0}"
114:10-114:11::f :: "{v : (LHExercises.SList a) | v == f}"
114:15-114:16::lq_anf$##7205759403792801792 :: "GHC.Types.Int"
114:19-114:67::GHC.Maybe.Just :: "{VV : forall a .\n      x1:a -> {v : (GHC.Maybe.Maybe a) | isJust v\n                                         && fromJust v == x1\n                                         && lqdc##$select v == x1} | VV == Just}"
114:24-114:67::lq_anf$##7205759403792801808 :: "(a, (LHExercises.Queue a))"
114:25-114:43::lq_anf$##7205759403792801802 :: "a"
114:28-114:43::lq_anf$##7205759403792801801 :: "(LHExercises.SList a)"
114:33-114:34::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
114:35-114:38::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
114:39-114:42::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
114:45-114:66::lq_anf$##7205759403792801807 :: "(LHExercises.Queue a)"
114:47-114:62::lq_anf$##7205759403792801805 :: "(LHExercises.SList a)"
114:52-114:53::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
114:54-114:57::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
114:58-114:61::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
114:63-114:66::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
115:17-115:44::GHC.Maybe.Just :: "{VV : forall a .\n      x1:a -> {v : (GHC.Maybe.Maybe a) | isJust v\n                                         && fromJust v == x1\n                                         && lqdc##$select v == x1} | VV == Just}"
115:22-115:44::lq_anf$##7205759403792801798 :: "(a, (LHExercises.Queue a))"
115:23-115:27::lq_anf$##7205759403792801795 :: "a"
115:26-115:27::f :: "{v : (LHExercises.SList a) | v == f}"
115:29-115:43::lq_anf$##7205759403792801797 :: "(LHExercises.Queue a)"
115:35-115:41::lq_anf$##7205759403792801796 :: "{v : (LHExercises.SList a) | size v == size f - 1}"
115:39-115:40::f :: "{v : (LHExercises.SList a) | v == f}"
115:42-115:43::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
118:1-118:7::LHExercises.remove :: "forall a .\nx1:{VV : (LHExercises.Queue a) | qsize VV > 0} -> (a, {VV : (LHExercises.Queue a) | qsize VV == qsize x1 - 1})"
118:18-118:40::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
118:19-118:23::lq_anf$##7205759403792801776 :: "a"
118:22-118:23::f :: "{v : (LHExercises.SList a) | v == f}"
118:25-118:39::lq_anf$##7205759403792801778 :: "(LHExercises.Queue a)"
118:31-118:37::lq_anf$##7205759403792801777 :: "{v : (LHExercises.SList a) | size v == size f - 1}"
118:35-118:36::f :: "{v : (LHExercises.SList a) | v == f}"
118:38-118:39::b :: "{v : (LHExercises.SList a) | v == b\n                             && size v <= size f}"
121:1-121:9::LHExercises.okRemove :: "(GHC.Num.Integer.Integer, (LHExercises.Queue GHC.Num.Integer.Integer))"
121:19-121:28::LHExercises.example2Q :: "{v : (LHExercises.Queue GHC.Num.Integer.Integer) | v == example2Q\n                                                   && qsize v == 2}"
126:1-126:4::LHExercises.emp :: "forall a . {VV : (LHExercises.Queue a) | qsize VV == 0}"
126:9-126:12::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
126:13-126:16::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
129:1-129:10::LHExercises.example2Q :: "{VV : (LHExercises.Queue GHC.Num.Integer.Integer) | qsize VV == 2}"
129:15-129:40::lq_anf$##7205759403792801741 :: "(LHExercises.SList GHC.Num.Integer.Integer)"
129:16-129:17::lq_anf$##7205759403792801737 :: "{v : GHC.Num.Integer.Integer | v == 1}"
129:25-129:39::lq_anf$##7205759403792801740 :: "(LHExercises.SList GHC.Num.Integer.Integer)"
129:26-129:27::lq_anf$##7205759403792801738 :: "{v : GHC.Num.Integer.Integer | v == 2}"
129:35-129:38::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
129:41-129:44::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
132:1-132:10::LHExercises.example0Q :: "forall a . {VV : (LHExercises.Queue a) | qsize VV == 0}"
132:15-132:18::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"
132:19-132:22::_ :: "{VV : forall a .\n      {v : (LHExercises.SList a) | size v == 0} | VV == nil}"